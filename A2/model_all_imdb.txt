rf starts
Best params: {'rf__max_depth': 1000, 'rf__max_features': 10, 'rf__n_estimators': 500, 'rf__n_jobs': 5}
Validation results: {'mean_fit_time': array([ 27.75113106, 113.49210157,  52.97390766, 158.05501814,
        47.10926104, 138.29451818,  55.16925206, 151.88814473,
        50.27704935, 140.57041659,  55.56522579,  96.97916794]), 'std_fit_time': array([ 3.90840774,  3.13517426,  4.4492906 ,  4.66356555,  4.52469927,
        9.27739503,  8.63099751,  1.791294  ,  4.63453355,  5.39486959,
        6.85383369, 11.75531335]), 'mean_score_time': array([13.25002337,  9.58292022, 13.52906351, 19.49245362, 13.3985384 ,
       13.04853835, 11.02789407, 17.55016427, 14.76715574, 10.55576386,
        8.39400005,  3.80022669]), 'std_score_time': array([1.34950961, 0.71311433, 0.99172091, 2.26757232, 3.16598771,
       3.03645432, 2.1898349 , 1.53001106, 1.97925527, 4.60310018,
       1.7624174 , 2.53579303]), 'param_rf__max_depth': masked_array(data=[500, 500, 500, 500, 1000, 1000, 1000, 1000, 2000, 2000,
                   2000, 2000],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_rf__max_features': masked_array(data=[10, 10, 50, 50, 10, 10, 50, 50, 10, 10, 50, 50],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_rf__n_estimators': masked_array(data=[100, 500, 100, 500, 100, 500, 100, 500, 100, 500, 100,
                   500],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_rf__n_jobs': masked_array(data=[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'rf__max_depth': 500, 'rf__max_features': 10, 'rf__n_estimators': 100, 'rf__n_jobs': 5}, {'rf__max_depth': 500, 'rf__max_features': 10, 'rf__n_estimators': 500, 'rf__n_jobs': 5}, {'rf__max_depth': 500, 'rf__max_features': 50, 'rf__n_estimators': 100, 'rf__n_jobs': 5}, {'rf__max_depth': 500, 'rf__max_features': 50, 'rf__n_estimators': 500, 'rf__n_jobs': 5}, {'rf__max_depth': 1000, 'rf__max_features': 10, 'rf__n_estimators': 100, 'rf__n_jobs': 5}, {'rf__max_depth': 1000, 'rf__max_features': 10, 'rf__n_estimators': 500, 'rf__n_jobs': 5}, {'rf__max_depth': 1000, 'rf__max_features': 50, 'rf__n_estimators': 100, 'rf__n_jobs': 5}, {'rf__max_depth': 1000, 'rf__max_features': 50, 'rf__n_estimators': 500, 'rf__n_jobs': 5}, {'rf__max_depth': 2000, 'rf__max_features': 10, 'rf__n_estimators': 100, 'rf__n_jobs': 5}, {'rf__max_depth': 2000, 'rf__max_features': 10, 'rf__n_estimators': 500, 'rf__n_jobs': 5}, {'rf__max_depth': 2000, 'rf__max_features': 50, 'rf__n_estimators': 100, 'rf__n_jobs': 5}, {'rf__max_depth': 2000, 'rf__max_features': 50, 'rf__n_estimators': 500, 'rf__n_jobs': 5}], 'split0_test_score': array([0.809 , 0.8562, 0.8238, 0.8542, 0.8128, 0.86  , 0.8302, 0.8524,
       0.8126, 0.8578, 0.8304, 0.858 ]), 'split1_test_score': array([0.8092, 0.8534, 0.819 , 0.8506, 0.8188, 0.8528, 0.8154, 0.8522,
       0.8074, 0.8486, 0.8266, 0.8552]), 'split2_test_score': array([0.8182, 0.8596, 0.8344, 0.8592, 0.8242, 0.866 , 0.8318, 0.8614,
       0.8152, 0.8706, 0.836 , 0.8646]), 'split3_test_score': array([0.8102, 0.8616, 0.8294, 0.8578, 0.8188, 0.8608, 0.827 , 0.853 ,
       0.8234, 0.859 , 0.8276, 0.8512]), 'split4_test_score': array([0.8156, 0.8536, 0.8344, 0.8602, 0.8118, 0.8634, 0.8298, 0.8594,
       0.8044, 0.857 , 0.8326, 0.8616]), 'mean_test_score': array([0.81244, 0.85688, 0.8282 , 0.8564 , 0.81728, 0.8606 , 0.82684,
       0.85568, 0.8126 , 0.8586 , 0.83064, 0.85812]), 'std_test_score': array([0.00375532, 0.00325601, 0.00603854, 0.00354175, 0.00453008,
       0.00443261, 0.0059254 , 0.00391428, 0.00659818, 0.00703363,
       0.00341151, 0.00470166]), 'rank_test_score': array([12,  4,  8,  5, 10,  1,  9,  6, 11,  2,  7,  3])}
Test accuracy: 0.84852
Classification report:               precision    recall  f1-score   support

           0       0.85      0.84      0.85     12500
           1       0.84      0.86      0.85     12500

    accuracy                           0.85     25000
   macro avg       0.85      0.85      0.85     25000
weighted avg       0.85      0.85      0.85     25000

Running time: 661.0801000595093
dt starts
Best params: {'dt__max_features': 'auto', 'dt__splitter': 'random'}
Validation results: {'mean_fit_time': array([6.85307555, 7.74477115, 7.09174504, 6.15308223]), 'std_fit_time': array([0.28246225, 0.07851299, 0.55991996, 0.35441724]), 'mean_score_time': array([1.56410584, 1.56070762, 1.25728555, 0.99364681]), 'std_score_time': array([0.06484134, 0.03908044, 0.2016995 , 0.17642495]), 'param_dt__max_features': masked_array(data=['auto', 'auto', 'log2', 'log2'],
             mask=[False, False, False, False],
       fill_value='?',
            dtype=object), 'param_dt__splitter': masked_array(data=['best', 'random', 'best', 'random'],
             mask=[False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'dt__max_features': 'auto', 'dt__splitter': 'best'}, {'dt__max_features': 'auto', 'dt__splitter': 'random'}, {'dt__max_features': 'log2', 'dt__splitter': 'best'}, {'dt__max_features': 'log2', 'dt__splitter': 'random'}], 'split0_test_score': array([0.6374, 0.6234, 0.5664, 0.5844]), 'split1_test_score': array([0.6226, 0.6274, 0.58  , 0.5702]), 'split2_test_score': array([0.6374, 0.6616, 0.5812, 0.566 ]), 'split3_test_score': array([0.629 , 0.6354, 0.5736, 0.5818]), 'split4_test_score': array([0.6174, 0.6354, 0.5952, 0.5774]), 'mean_test_score': array([0.62876, 0.63664, 0.57928, 0.57596]), 'std_test_score': array([0.00795427, 0.0133173 , 0.00954786, 0.0069252 ]), 'rank_test_score': array([2, 1, 3, 4])}
Test accuracy: 0.62396
Classification report:               precision    recall  f1-score   support

           0       0.62      0.62      0.62     12500
           1       0.62      0.63      0.63     12500

    accuracy                           0.62     25000
   macro avg       0.62      0.62      0.62     25000
weighted avg       0.62      0.62      0.62     25000

Running time: 32.53139567375183
svm starts
Best params: {'svm__C': 0.1, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}
Validation results: {'mean_fit_time': array([ 6.00156269,  7.93646097, 11.85981832, 11.38149142,  6.7583354 ,
        8.05759254, 10.26133208, 10.62212567,  6.85328074,  7.52049937,
       11.51141796, 11.11884184,  6.75893478,  7.43214951, 10.8316061 ,
       11.56018958,  6.80011129, 10.06644387, 14.86110187, 13.4301199 ,
        6.6825788 ,  9.80919061, 14.06635628, 14.15870309,  6.59462833,
        9.88474741, 11.94556909, 15.1255506 ,  6.80970569,  9.68626142,
       12.8872304 , 14.63982816,  6.79051781, 10.38106351, 13.8166986 ,
       13.54765258,  6.69157343,  9.86615772, 13.93043418, 13.72415171,
        6.74234443, 20.46030087, 14.95145092, 13.75993161,  6.81070571,
       23.86055579, 15.71381445, 14.6346303 ,  6.86167598,  9.81718626,
       14.5109025 , 13.94182701,  6.80990629,  9.65467935, 14.75242515,
       14.88667221,  7.16122789, 20.61241341, 15.95047989, 13.68037648,
        6.8720696 , 31.86577792, 14.68260455, 13.37395778]), 'std_fit_time': array([0.28789952, 1.06647577, 3.65125776, 3.58743386, 0.10709562,
       0.82785675, 0.92189564, 1.85844373, 0.0217995 , 0.1307911 ,
       3.01589352, 2.35590486, 0.13259992, 0.10048429, 2.09766033,
       2.97495852, 0.05347098, 1.61988324, 4.47914077, 3.12868418,
       0.02145007, 1.53439384, 3.10490199, 3.66525575, 0.13491081,
       0.33406457, 2.11179271, 4.53566884, 0.10854659, 0.2104143 ,
       3.64512493, 4.5139396 , 0.1162046 , 1.79369069, 3.3979241 ,
       2.97907569, 0.08080072, 1.52000772, 3.44585235, 2.92109459,
       0.12284288, 0.2208293 , 3.22468138, 3.57146775, 0.06583694,
       0.97219236, 4.84179408, 3.91839178, 0.10572562, 1.59561038,
       3.99863173, 4.0128213 , 0.06841554, 1.41167317, 4.37817955,
       5.07969481, 0.14044384, 1.01136201, 5.04188309, 3.40229265,
       0.37417225, 0.76410383, 4.19756236, 1.90720052]), 'mean_score_time': array([0.        , 1.60947952, 1.53931985, 1.51953115, 0.        ,
       1.52792635, 1.49214702, 1.5649056 , 0.        , 1.55351186,
       1.55591006, 1.545716  , 0.        , 1.54351707, 1.54091907,
       1.58109632, 0.        , 1.50214081, 1.58949099, 1.45636783,
       0.        , 1.5093369 , 1.49634461, 1.46996007, 0.        ,
       1.53652129, 1.50933671, 1.5091372 , 0.        , 1.52432809,
       1.56690426, 1.54291773, 0.        , 1.56330605, 1.49714413,
       1.53432293, 0.        , 1.51793232, 1.48894839, 1.55611   ,
       0.        , 1.56230569, 1.53292313, 1.57669797, 0.        ,
       1.52632699, 1.4803534 , 1.55311213, 0.        , 1.55351176,
       1.56150689, 1.52672668, 0.        , 1.56770349, 1.58829188,
       1.59165783, 0.        , 1.41259265, 1.54951415, 1.56930304,
       0.        , 1.11975961, 1.50553932, 1.28646464]), 'std_score_time': array([0.        , 0.0280024 , 0.05771676, 0.06231971, 0.        ,
       0.07649254, 0.06062126, 0.03783237, 0.        , 0.05795129,
       0.03809642, 0.06257291, 0.        , 0.03966916, 0.04468879,
       0.0559896 , 0.        , 0.05546239, 0.01919958, 0.06330191,
       0.        , 0.09815026, 0.04714213, 0.06648866, 0.        ,
       0.07460485, 0.06129512, 0.02905528, 0.        , 0.05627939,
       0.03152532, 0.04672968, 0.        , 0.06618108, 0.0582452 ,
       0.04110279, 0.        , 0.08585331, 0.0326334 , 0.03557796,
       0.        , 0.03610863, 0.02871963, 0.04113765, 0.        ,
       0.10047999, 0.05473107, 0.10936388, 0.        , 0.05750173,
       0.07062662, 0.04743062, 0.        , 0.04814587, 0.06322635,
       0.18332191, 0.        , 0.16147657, 0.04528914, 0.05702333,
       0.        , 0.32276507, 0.27882944, 0.36270387]), 'param_svm__C': masked_array(data=[0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                   0.1, 0.1, 0.1, 0.1, 0.1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                   1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10, 10, 10, 10, 10,
                   10, 10, 10, 10, 10, 10, 10, 100, 100, 100, 100, 100,
                   100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_svm__loss': masked_array(data=['hinge', 'hinge', 'hinge', 'hinge', 'hinge', 'hinge',
                   'hinge', 'hinge', 'squared_hinge', 'squared_hinge',
                   'squared_hinge', 'squared_hinge', 'squared_hinge',
                   'squared_hinge', 'squared_hinge', 'squared_hinge',
                   'hinge', 'hinge', 'hinge', 'hinge', 'hinge', 'hinge',
                   'hinge', 'hinge', 'squared_hinge', 'squared_hinge',
                   'squared_hinge', 'squared_hinge', 'squared_hinge',
                   'squared_hinge', 'squared_hinge', 'squared_hinge',
                   'hinge', 'hinge', 'hinge', 'hinge', 'hinge', 'hinge',
                   'hinge', 'hinge', 'squared_hinge', 'squared_hinge',
                   'squared_hinge', 'squared_hinge', 'squared_hinge',
                   'squared_hinge', 'squared_hinge', 'squared_hinge',
                   'hinge', 'hinge', 'hinge', 'hinge', 'hinge', 'hinge',
                   'hinge', 'hinge', 'squared_hinge', 'squared_hinge',
                   'squared_hinge', 'squared_hinge', 'squared_hinge',
                   'squared_hinge', 'squared_hinge', 'squared_hinge'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_svm__max_iter': masked_array(data=[1000, 1000, 1000, 1000, 2000, 2000, 2000, 2000, 1000,
                   1000, 1000, 1000, 2000, 2000, 2000, 2000, 1000, 1000,
                   1000, 1000, 2000, 2000, 2000, 2000, 1000, 1000, 1000,
                   1000, 2000, 2000, 2000, 2000, 1000, 1000, 1000, 1000,
                   2000, 2000, 2000, 2000, 1000, 1000, 1000, 1000, 2000,
                   2000, 2000, 2000, 1000, 1000, 1000, 1000, 2000, 2000,
                   2000, 2000, 1000, 1000, 1000, 1000, 2000, 2000, 2000,
                   2000],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_svm__multi_class': masked_array(data=['ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_svm__penalty': masked_array(data=['l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1',
                   'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2',
                   'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1',
                   'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2',
                   'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1',
                   'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2',
                   'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1',
                   'l2'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'svm__C': 0.1, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 0.1, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 0.1, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 0.1, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 0.1, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 0.1, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 0.1, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 0.1, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 0.1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 0.1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 0.1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 0.1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 0.1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 0.1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 0.1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 0.1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 1, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 1, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 1, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 1, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 1, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 1, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 1, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 1, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 10, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 10, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 10, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 10, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 10, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 10, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 10, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 10, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 10, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 10, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 10, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 10, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 10, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 10, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 10, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 10, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 100, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 100, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 100, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 100, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 100, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 100, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 100, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 100, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 100, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 100, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 100, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 100, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 100, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 100, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 100, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 100, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}], 'split0_test_score': array([   nan, 0.8868, 0.8826, 0.8826,    nan, 0.8868, 0.8826, 0.8826,
          nan, 0.8842, 0.8826, 0.8826,    nan, 0.8842, 0.8826, 0.8826,
          nan, 0.869 , 0.8666, 0.8666,    nan, 0.869 , 0.8666, 0.8666,
          nan, 0.8716, 0.8666, 0.8666,    nan, 0.8716, 0.8666, 0.8666,
          nan, 0.866 , 0.866 , 0.866 ,    nan, 0.866 , 0.866 , 0.866 ,
          nan, 0.867 , 0.866 , 0.866 ,    nan, 0.867 , 0.866 , 0.866 ,
          nan, 0.866 , 0.866 , 0.866 ,    nan, 0.866 , 0.866 , 0.866 ,
          nan, 0.866 , 0.866 , 0.866 ,    nan, 0.866 , 0.866 , 0.866 ]), 'split1_test_score': array([   nan, 0.8818, 0.8768, 0.8768,    nan, 0.8818, 0.8768, 0.8768,
          nan, 0.8812, 0.8768, 0.8768,    nan, 0.8812, 0.8768, 0.8768,
          nan, 0.8646, 0.8614, 0.8614,    nan, 0.8646, 0.8614, 0.8614,
          nan, 0.8678, 0.8614, 0.8614,    nan, 0.8678, 0.8614, 0.8614,
          nan, 0.8612, 0.8612, 0.8612,    nan, 0.8612, 0.8612, 0.8612,
          nan, 0.8616, 0.8612, 0.8612,    nan, 0.8616, 0.8612, 0.8612,
          nan, 0.8612, 0.8612, 0.8612,    nan, 0.8612, 0.8612, 0.8612,
          nan, 0.861 , 0.8612, 0.8612,    nan, 0.861 , 0.8612, 0.8612]), 'split2_test_score': array([   nan, 0.8866, 0.8796, 0.8796,    nan, 0.8866, 0.8796, 0.8796,
          nan, 0.8872, 0.8796, 0.8796,    nan, 0.8872, 0.8796, 0.8796,
          nan, 0.8694, 0.868 , 0.868 ,    nan, 0.8694, 0.868 , 0.868 ,
          nan, 0.8718, 0.868 , 0.868 ,    nan, 0.8718, 0.868 , 0.868 ,
          nan, 0.868 , 0.868 , 0.868 ,    nan, 0.868 , 0.868 , 0.868 ,
          nan, 0.8678, 0.868 , 0.868 ,    nan, 0.8678, 0.868 , 0.868 ,
          nan, 0.868 , 0.868 , 0.868 ,    nan, 0.868 , 0.868 , 0.868 ,
          nan, 0.868 , 0.868 , 0.868 ,    nan, 0.868 , 0.868 , 0.868 ]), 'split3_test_score': array([   nan, 0.8912, 0.8854, 0.8854,    nan, 0.8912, 0.8854, 0.8854,
          nan, 0.8932, 0.8854, 0.8854,    nan, 0.8932, 0.8854, 0.8854,
          nan, 0.8662, 0.8662, 0.8662,    nan, 0.8662, 0.8662, 0.8662,
          nan, 0.8734, 0.8662, 0.8662,    nan, 0.8734, 0.8662, 0.8662,
          nan, 0.8668, 0.8668, 0.8668,    nan, 0.8668, 0.8668, 0.8668,
          nan, 0.8672, 0.8668, 0.8668,    nan, 0.8672, 0.8668, 0.8668,
          nan, 0.8668, 0.8668, 0.8668,    nan, 0.8668, 0.8668, 0.8668,
          nan, 0.867 , 0.8668, 0.8668,    nan, 0.867 , 0.8668, 0.8668]), 'split4_test_score': array([   nan, 0.8804, 0.8746, 0.8746,    nan, 0.8804, 0.8746, 0.8746,
          nan, 0.8772, 0.8746, 0.8746,    nan, 0.8772, 0.8746, 0.8746,
          nan, 0.862 , 0.8596, 0.8596,    nan, 0.862 , 0.8596, 0.8596,
          nan, 0.866 , 0.8596, 0.8596,    nan, 0.866 , 0.8596, 0.8596,
          nan, 0.86  , 0.86  , 0.86  ,    nan, 0.86  , 0.86  , 0.86  ,
          nan, 0.8606, 0.86  , 0.86  ,    nan, 0.8606, 0.86  , 0.86  ,
          nan, 0.86  , 0.86  , 0.86  ,    nan, 0.86  , 0.86  , 0.86  ,
          nan, 0.86  , 0.86  , 0.86  ,    nan, 0.86  , 0.86  , 0.86  ]), 'mean_test_score': array([    nan, 0.88536, 0.8798 , 0.8798 ,     nan, 0.88536, 0.8798 ,
       0.8798 ,     nan, 0.8846 , 0.8798 , 0.8798 ,     nan, 0.8846 ,
       0.8798 , 0.8798 ,     nan, 0.86624, 0.86436, 0.86436,     nan,
       0.86624, 0.86436, 0.86436,     nan, 0.87012, 0.86436, 0.86436,
           nan, 0.87012, 0.86436, 0.86436,     nan, 0.8644 , 0.8644 ,
       0.8644 ,     nan, 0.8644 , 0.8644 , 0.8644 ,     nan, 0.86484,
       0.8644 , 0.8644 ,     nan, 0.86484, 0.8644 , 0.8644 ,     nan,
       0.8644 , 0.8644 , 0.8644 ,     nan, 0.8644 , 0.8644 , 0.8644 ,
           nan, 0.8644 , 0.8644 , 0.8644 ,     nan, 0.8644 , 0.8644 ,
       0.8644 ]), 'std_test_score': array([       nan, 0.00387278, 0.00388021, 0.00388021,        nan,
       0.00387278, 0.00388021, 0.00388021,        nan, 0.00542586,
       0.00388021, 0.00388021,        nan, 0.00542586, 0.00388021,
       0.00388021,        nan, 0.00276666, 0.00325797, 0.00325797,
              nan, 0.00276666, 0.00325797, 0.00325797,        nan,
       0.00276145, 0.00325797, 0.00325797,        nan, 0.00276145,
       0.00325797, 0.00325797,        nan, 0.00318998, 0.00318998,
       0.00318998,        nan, 0.00318998, 0.00318998, 0.00318998,
              nan, 0.0030813 , 0.00318998, 0.00318998,        nan,
       0.0030813 , 0.00318998, 0.00318998,        nan, 0.00318998,
       0.00318998, 0.00318998,        nan, 0.00318998, 0.00318998,
       0.00318998,        nan, 0.0032619 , 0.00318998, 0.00318998,
              nan, 0.0032619 , 0.00318998, 0.00318998]), 'rank_test_score': array([64,  1,  5,  5, 50,  1,  5,  5, 52,  3,  5,  5, 53,  3,  5,  5, 54,
       15, 41, 41, 63, 15, 41, 41, 58, 13, 41, 41, 60, 13, 41, 41, 62, 19,
       19, 19, 49, 19, 19, 19, 57, 17, 19, 19, 61, 17, 19, 19, 59, 19, 19,
       19, 56, 19, 19, 19, 55, 19, 19, 19, 51, 19, 19, 19])}svm starts
Best params: {'svm__C': 0.1, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}
Validation results: {'mean_fit_time': array([ 6.5808363 ,  8.18811755, 11.7222971 , 11.78725924,  6.82469659,
        8.06318893, 10.89776812, 11.45463543,  6.89545646,  7.6141149 ,
       12.45120888, 11.09665442,  6.84208717,  7.4905169 , 11.66348186,
       11.96693597,  6.92599025, 10.33229232, 12.62378078, 14.3152133 ,
        6.86627345, 10.41244597, 13.0329474 , 14.79154091,  6.84688444,
        9.75882015, 14.0200377 , 13.93776836,  6.76041756,  9.9187284 ,
       14.47292352, 14.83971353,  6.78372064, 10.06864276, 14.92226653,
       14.77255206,  6.93203573, 10.59973907, 14.76635571, 14.35878863,
        6.83229275, 20.96401229, 16.84716659, 14.29122667,  6.81430316,
       23.51675167, 15.43177605, 15.29825058,  6.82489586, 10.29691234,
       13.94742422, 12.84825196,  6.78911715,  9.99268551, 14.25184994,
       13.86047397,  6.73294945, 20.82948928, 14.96364274, 13.32238092,
        6.85767856, 33.04870167, 16.01304393, 14.88789277]), 'std_fit_time': array([0.06992796, 0.89118644, 3.39029193, 2.59967001, 0.14331071,
       0.75440106, 2.18553027, 3.92184815, 0.11376733, 0.1058937 ,
       4.07638592, 1.79622589, 0.07717823, 0.09688488, 3.73597828,
       3.87236984, 0.07146933, 1.95940344, 2.78661326, 4.6724206 ,
       0.11168811, 1.891036  , 2.00718236, 4.62642136, 0.10440361,
       0.15448166, 3.6493515 , 3.94047715, 0.11027147, 0.32648915,
       3.88491125, 4.20153266, 0.06701593, 1.7547333 , 3.87606317,
       4.62164326, 0.3038709 , 1.92519129, 4.3118508 , 4.24598054,
       0.08478142, 0.46156648, 4.67490891, 3.7387742 , 0.04964013,
       1.67584412, 4.66667193, 4.82395833, 0.18400265, 1.55485303,
       3.43752252, 2.41040333, 0.13007194, 1.78302341, 3.78631001,
       3.80164374, 0.08638996, 0.58454669, 3.87967839, 2.76455688,
       0.03767038, 0.48526354, 5.15129666, 2.90049401]), 'mean_score_time': array([0.        , 1.59668708, 1.57569914, 1.51493373, 0.        ,
       1.58369451, 1.51553359, 1.56690435, 0.        , 1.6027432 ,
       1.57210131, 1.55830894, 0.        , 1.58749204, 1.51188745,
       1.54091868, 0.        , 1.61667571, 1.50453987, 1.5155333 ,
       0.        , 1.54091883, 1.49614453, 1.571102  , 0.        ,
       1.62966762, 1.49854393, 1.53412285, 0.        , 1.60248327,
       1.52053061, 1.55051389, 0.        , 1.56110744, 1.55830903,
       1.52212977, 0.        , 1.5629055 , 1.50374031, 1.61547675,
       0.        , 1.56070771, 1.53891964, 1.62067285, 0.        ,
       1.54571624, 1.5942884 , 1.51813188, 0.        , 1.57090154,
       1.55171323, 1.52412834, 0.        , 1.50434017, 1.5379209 ,
       1.537321  , 0.        , 1.54971361, 1.51313496, 1.5910903 ,
       0.        , 1.04160433, 1.60168405, 1.19111176]), 'std_score_time': array([0.        , 0.04291986, 0.08985429, 0.04081467, 0.        ,
       0.03239499, 0.03594385, 0.10872655, 0.        , 0.06645389,
       0.05002323, 0.04540646, 0.        , 0.01967234, 0.05895995,
       0.02549122, 0.        , 0.07932642, 0.03483761, 0.04732528,
       0.        , 0.06173308, 0.06407274, 0.07512093, 0.        ,
       0.11618102, 0.0650798 , 0.06083225, 0.        , 0.04433075,
       0.07152883, 0.04470231, 0.        , 0.06158563, 0.07010135,
       0.09600587, 0.        , 0.07401042, 0.05322575, 0.13088552,
       0.        , 0.03579343, 0.05290552, 0.03930468, 0.        ,
       0.12804289, 0.0508491 , 0.02511691, 0.        , 0.05451206,
       0.03962377, 0.11267787, 0.        , 0.08203968, 0.05976293,
       0.05857144, 0.        , 0.10251527, 0.04422374, 0.04137667,
       0.        , 0.24004839, 0.06320241, 0.33449548]), 'param_svm__C': masked_array(data=[0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                   0.1, 0.1, 0.1, 0.1, 0.1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                   1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10, 10, 10, 10, 10,
                   10, 10, 10, 10, 10, 10, 10, 100, 100, 100, 100, 100,
                   100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_svm__loss': masked_array(data=['hinge', 'hinge', 'hinge', 'hinge', 'hinge', 'hinge',
                   'hinge', 'hinge', 'squared_hinge', 'squared_hinge',
                   'squared_hinge', 'squared_hinge', 'squared_hinge',
                   'squared_hinge', 'squared_hinge', 'squared_hinge',
                   'hinge', 'hinge', 'hinge', 'hinge', 'hinge', 'hinge',
                   'hinge', 'hinge', 'squared_hinge', 'squared_hinge',
                   'squared_hinge', 'squared_hinge', 'squared_hinge',
                   'squared_hinge', 'squared_hinge', 'squared_hinge',
                   'hinge', 'hinge', 'hinge', 'hinge', 'hinge', 'hinge',
                   'hinge', 'hinge', 'squared_hinge', 'squared_hinge',
                   'squared_hinge', 'squared_hinge', 'squared_hinge',
                   'squared_hinge', 'squared_hinge', 'squared_hinge',
                   'hinge', 'hinge', 'hinge', 'hinge', 'hinge', 'hinge',
                   'hinge', 'hinge', 'squared_hinge', 'squared_hinge',
                   'squared_hinge', 'squared_hinge', 'squared_hinge',
                   'squared_hinge', 'squared_hinge', 'squared_hinge'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_svm__max_iter': masked_array(data=[1000, 1000, 1000, 1000, 2000, 2000, 2000, 2000, 1000,
                   1000, 1000, 1000, 2000, 2000, 2000, 2000, 1000, 1000,
                   1000, 1000, 2000, 2000, 2000, 2000, 1000, 1000, 1000,
                   1000, 2000, 2000, 2000, 2000, 1000, 1000, 1000, 1000,
                   2000, 2000, 2000, 2000, 1000, 1000, 1000, 1000, 2000,
                   2000, 2000, 2000, 1000, 1000, 1000, 1000, 2000, 2000,
                   2000, 2000, 1000, 1000, 1000, 1000, 2000, 2000, 2000,
                   2000],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_svm__multi_class': masked_array(data=['ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_svm__penalty': masked_array(data=['l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1',
                   'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2',
                   'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1',
                   'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2',
                   'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1',
                   'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2',
                   'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1',
                   'l2'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'svm__C': 0.1, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 0.1, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 0.1, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 0.1, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 0.1, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 0.1, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 0.1, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 0.1, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 0.1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 0.1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 0.1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 0.1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 0.1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 0.1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 0.1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 0.1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 1, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 1, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 1, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 1, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 1, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 1, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 1, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 1, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 10, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 10, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 10, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 10, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 10, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 10, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 10, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 10, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 10, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 10, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 10, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 10, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 10, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 10, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 10, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 10, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 100, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 100, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 100, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 100, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 100, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 100, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 100, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 100, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 100, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 100, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 100, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 100, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 100, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 100, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 100, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 100, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}], 'split0_test_score': array([   nan, 0.8868, 0.8826, 0.8826,    nan, 0.8868, 0.8826, 0.8826,
          nan, 0.8842, 0.8826, 0.8826,    nan, 0.8842, 0.8826, 0.8826,
          nan, 0.869 , 0.8666, 0.8666,    nan, 0.869 , 0.8666, 0.8666,
          nan, 0.8716, 0.8666, 0.8666,    nan, 0.8716, 0.8666, 0.8666,
          nan, 0.866 , 0.866 , 0.866 ,    nan, 0.866 , 0.866 , 0.866 ,
          nan, 0.867 , 0.866 , 0.866 ,    nan, 0.867 , 0.866 , 0.866 ,
          nan, 0.866 , 0.866 , 0.866 ,    nan, 0.866 , 0.866 , 0.866 ,
          nan, 0.866 , 0.866 , 0.866 ,    nan, 0.866 , 0.866 , 0.866 ]), 'split1_test_score': array([   nan, 0.8818, 0.8768, 0.8768,    nan, 0.8818, 0.8768, 0.8768,
          nan, 0.8812, 0.8768, 0.8768,    nan, 0.8812, 0.8768, 0.8768,
          nan, 0.8646, 0.8614, 0.8614,    nan, 0.8646, 0.8614, 0.8614,
          nan, 0.8678, 0.8614, 0.8614,    nan, 0.8678, 0.8614, 0.8614,
          nan, 0.8612, 0.8612, 0.8612,    nan, 0.8612, 0.8612, 0.8612,
          nan, 0.8616, 0.8612, 0.8612,    nan, 0.8616, 0.8612, 0.8612,
          nan, 0.8612, 0.8612, 0.8612,    nan, 0.8612, 0.8612, 0.8612,
          nan, 0.861 , 0.8612, 0.8612,    nan, 0.861 , 0.8612, 0.8612]), 'split2_test_score': array([   nan, 0.8866, 0.8796, 0.8796,    nan, 0.8866, 0.8796, 0.8796,
          nan, 0.8872, 0.8796, 0.8796,    nan, 0.8872, 0.8796, 0.8796,
          nan, 0.8694, 0.868 , 0.868 ,    nan, 0.8694, 0.868 , 0.868 ,
          nan, 0.8718, 0.868 , 0.868 ,    nan, 0.8718, 0.868 , 0.868 ,
          nan, 0.868 , 0.868 , 0.868 ,    nan, 0.868 , 0.868 , 0.868 ,
          nan, 0.8678, 0.868 , 0.868 ,    nan, 0.8678, 0.868 , 0.868 ,
          nan, 0.868 , 0.868 , 0.868 ,    nan, 0.868 , 0.868 , 0.868 ,
          nan, 0.868 , 0.868 , 0.868 ,    nan, 0.868 , 0.868 , 0.868 ]), 'split3_test_score': array([   nan, 0.8912, 0.8854, 0.8854,    nan, 0.8912, 0.8854, 0.8854,
          nan, 0.8932, 0.8854, 0.8854,    nan, 0.8932, 0.8854, 0.8854,
          nan, 0.8662, 0.8662, 0.8662,    nan, 0.8662, 0.8662, 0.8662,
          nan, 0.8734, 0.8662, 0.8662,    nan, 0.8734, 0.8662, 0.8662,
          nan, 0.8668, 0.8668, 0.8668,    nan, 0.8668, 0.8668, 0.8668,
          nan, 0.8672, 0.8668, 0.8668,    nan, 0.8672, 0.8668, 0.8668,
          nan, 0.8668, 0.8668, 0.8668,    nan, 0.8668, 0.8668, 0.8668,
          nan, 0.867 , 0.8668, 0.8668,    nan, 0.867 , 0.8668, 0.8668]), 'split4_test_score': array([   nan, 0.8804, 0.8746, 0.8746,    nan, 0.8804, 0.8746, 0.8746,
          nan, 0.8772, 0.8746, 0.8746,    nan, 0.8772, 0.8746, 0.8746,
          nan, 0.862 , 0.8596, 0.8596,    nan, 0.862 , 0.8596, 0.8596,
          nan, 0.866 , 0.8596, 0.8596,    nan, 0.866 , 0.8596, 0.8596,
          nan, 0.86  , 0.86  , 0.86  ,    nan, 0.86  , 0.86  , 0.86  ,
          nan, 0.8606, 0.86  , 0.86  ,    nan, 0.8606, 0.86  , 0.86  ,
          nan, 0.86  , 0.86  , 0.86  ,    nan, 0.86  , 0.86  , 0.86  ,
          nan, 0.86  , 0.86  , 0.86  ,    nan, 0.86  , 0.86  , 0.86  ]), 'mean_test_score': array([    nan, 0.88536, 0.8798 , 0.8798 ,     nan, 0.88536, 0.8798 ,
       0.8798 ,     nan, 0.8846 , 0.8798 , 0.8798 ,     nan, 0.8846 ,
       0.8798 , 0.8798 ,     nan, 0.86624, 0.86436, 0.86436,     nan,
       0.86624, 0.86436, 0.86436,     nan, 0.87012, 0.86436, 0.86436,
           nan, 0.87012, 0.86436, 0.86436,     nan, 0.8644 , 0.8644 ,
       0.8644 ,     nan, 0.8644 , 0.8644 , 0.8644 ,     nan, 0.86484,
       0.8644 , 0.8644 ,     nan, 0.86484, 0.8644 , 0.8644 ,     nan,
       0.8644 , 0.8644 , 0.8644 ,     nan, 0.8644 , 0.8644 , 0.8644 ,
           nan, 0.8644 , 0.8644 , 0.8644 ,     nan, 0.8644 , 0.8644 ,
       0.8644 ]), 'std_test_score': array([       nan, 0.00387278, 0.00388021, 0.00388021,        nan,
       0.00387278, 0.00388021, 0.00388021,        nan, 0.00542586,
       0.00388021, 0.00388021,        nan, 0.00542586, 0.00388021,
       0.00388021,        nan, 0.00276666, 0.00325797, 0.00325797,
              nan, 0.00276666, 0.00325797, 0.00325797,        nan,
       0.00276145, 0.00325797, 0.00325797,        nan, 0.00276145,
       0.00325797, 0.00325797,        nan, 0.00318998, 0.00318998,
       0.00318998,        nan, 0.00318998, 0.00318998, 0.00318998,
              nan, 0.0030813 , 0.00318998, 0.00318998,        nan,
       0.0030813 , 0.00318998, 0.00318998,        nan, 0.00318998,
       0.00318998, 0.00318998,        nan, 0.00318998, 0.00318998,
       0.00318998,        nan, 0.0032619 , 0.00318998, 0.00318998,
              nan, 0.0032619 , 0.00318998, 0.00318998]), 'rank_test_score': array([64,  1,  5,  5, 50,  1,  5,  5, 52,  3,  5,  5, 53,  3,  5,  5, 54,
       15, 41, 41, 63, 15, 41, 41, 58, 13, 41, 41, 60, 13, 41, 41, 62, 19,
       19, 19, 49, 19, 19, 19, 57, 17, 19, 19, 61, 17, 19, 19, 59, 19, 19,
       19, 56, 19, 19, 19, 55, 19, 19, 19, 51, 19, 19, 19])}logistic starts
Best params: {'logistic__C': 1, 'logistic__max_iter': 100, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'lbfgs'}
Validation results: {'mean_fit_time': array([10.82101269,  9.55393767, 14.41935444, 10.90176673,  8.82655363,
       14.40676179, 11.33551831, 10.78563271, 13.4293201 , 11.25556355,
       11.0089047 , 13.59402599, 13.1362884 , 10.92695112, 16.37383666,
       13.57263823, 13.37015476, 25.03768334, 13.68517389, 10.90196495,
       16.53674259, 13.74314132, 15.85553389, 30.74602823]), 'std_fit_time': array([0.40000324, 0.3141041 , 1.10323844, 0.23730595, 0.47656378,
       1.15518589, 0.36285336, 0.64020956, 1.39520144, 0.27859741,
       0.80256014, 2.80488691, 0.52200695, 0.49055521, 0.44152852,
       0.72338564, 0.79042236, 0.83160212, 0.50538111, 0.13299049,
       0.23211732, 0.69121704, 1.05755777, 0.3852819 ]), 'mean_score_time': array([1.57909656, 1.54631481, 1.49694414, 1.43138113, 1.52852497,
       1.53592215, 1.53991914, 1.54111829, 1.51213541, 1.58689361,
       1.50673823, 1.54271851, 1.66125035, 1.54011941, 1.56970272,
       1.58249502, 1.59069009, 1.62886825, 1.57909675, 1.57889681,
       1.56810369, 1.58549395, 1.23909097, 0.85831981]), 'std_score_time': array([0.0660981 , 0.07398281, 0.04726539, 0.07910425, 0.05342008,
       0.04919583, 0.02124263, 0.03428453, 0.04694977, 0.04615776,
       0.11190461, 0.07024585, 0.09581746, 0.07127537, 0.06882785,
       0.03316898, 0.03808675, 0.03596523, 0.03466713, 0.01391154,
       0.06103259, 0.02619546, 0.13667738, 0.02769275]), 'param_logistic__C': masked_array(data=[0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 1, 1, 1, 1, 1, 1, 10, 10,
                   10, 10, 10, 10, 100, 100, 100, 100, 100, 100],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_logistic__max_iter': masked_array(data=[100, 100, 100, 500, 500, 500, 100, 100, 100, 500, 500,
                   500, 100, 100, 100, 500, 500, 500, 100, 100, 100, 500,
                   500, 500],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_logistic__n_jobs': masked_array(data=[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_logistic__penalty': masked_array(data=['l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_logistic__solver': masked_array(data=['newton-cg', 'lbfgs', 'sag', 'newton-cg', 'lbfgs',
                   'sag', 'newton-cg', 'lbfgs', 'sag', 'newton-cg',
                   'lbfgs', 'sag', 'newton-cg', 'lbfgs', 'sag',
                   'newton-cg', 'lbfgs', 'sag', 'newton-cg', 'lbfgs',
                   'sag', 'newton-cg', 'lbfgs', 'sag'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'logistic__C': 0.1, 'logistic__max_iter': 100, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'newton-cg'}, {'logistic__C': 0.1, 'logistic__max_iter': 100, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'lbfgs'}, {'logistic__C': 0.1, 'logistic__max_iter': 100, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'sag'}, {'logistic__C': 0.1, 'logistic__max_iter': 500, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'newton-cg'}, {'logistic__C': 0.1, 'logistic__max_iter': 500, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'lbfgs'}, {'logistic__C': 0.1, 'logistic__max_iter': 500, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'sag'}, {'logistic__C': 1, 'logistic__max_iter': 100, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'newton-cg'}, {'logistic__C': 1, 'logistic__max_iter': 100, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'lbfgs'}, {'logistic__C': 1, 'logistic__max_iter': 100, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'sag'}, {'logistic__C': 1, 'logistic__max_iter': 500, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'newton-cg'}, {'logistic__C': 1, 'logistic__max_iter': 500, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'lbfgs'}, {'logistic__C': 1, 'logistic__max_iter': 500, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'sag'}, {'logistic__C': 10, 'logistic__max_iter': 100, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'newton-cg'}, {'logistic__C': 10, 'logistic__max_iter': 100, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'lbfgs'}, {'logistic__C': 10, 'logistic__max_iter': 100, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'sag'}, {'logistic__C': 10, 'logistic__max_iter': 500, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'newton-cg'}, {'logistic__C': 10, 'logistic__max_iter': 500, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'lbfgs'}, {'logistic__C': 10, 'logistic__max_iter': 500, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'sag'}, {'logistic__C': 100, 'logistic__max_iter': 100, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'newton-cg'}, {'logistic__C': 100, 'logistic__max_iter': 100, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'lbfgs'}, {'logistic__C': 100, 'logistic__max_iter': 100, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'sag'}, {'logistic__C': 100, 'logistic__max_iter': 500, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'newton-cg'}, {'logistic__C': 100, 'logistic__max_iter': 500, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'lbfgs'}, {'logistic__C': 100, 'logistic__max_iter': 500, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'sag'}], 'split0_test_score': array([0.878 , 0.878 , 0.8782, 0.878 , 0.878 , 0.8782, 0.8854, 0.8854,
       0.8854, 0.8854, 0.8854, 0.8856, 0.882 , 0.882 , 0.8828, 0.882 ,
       0.882 , 0.8818, 0.8792, 0.8802, 0.8828, 0.8792, 0.8792, 0.8792]), 'split1_test_score': array([0.8776, 0.8776, 0.8774, 0.8776, 0.8776, 0.8774, 0.8852, 0.8852,
       0.8854, 0.8852, 0.8852, 0.8852, 0.8794, 0.8794, 0.8806, 0.8794,
       0.8794, 0.879 , 0.8752, 0.8752, 0.8782, 0.8752, 0.8752, 0.8752]), 'split2_test_score': array([0.8816, 0.8816, 0.8818, 0.8816, 0.8816, 0.8818, 0.8886, 0.8888,
       0.8886, 0.8886, 0.8886, 0.8886, 0.8842, 0.8846, 0.885 , 0.8842,
       0.8842, 0.8844, 0.8804, 0.8804, 0.8832, 0.8804, 0.8802, 0.8816]), 'split3_test_score': array([0.8842, 0.884 , 0.8844, 0.8842, 0.884 , 0.8844, 0.8968, 0.8968,
       0.8968, 0.8968, 0.8968, 0.8966, 0.8892, 0.889 , 0.8908, 0.8892,
       0.8892, 0.8912, 0.885 , 0.8846, 0.8908, 0.885 , 0.885 , 0.8868]), 'split4_test_score': array([0.8796, 0.8796, 0.8794, 0.8796, 0.8796, 0.8794, 0.8826, 0.8826,
       0.8826, 0.8826, 0.8826, 0.8826, 0.8772, 0.877 , 0.8776, 0.8772,
       0.8772, 0.8772, 0.8738, 0.874 , 0.8756, 0.8738, 0.8738, 0.8722]), 'mean_test_score': array([0.8802 , 0.88016, 0.88024, 0.8802 , 0.88016, 0.88024, 0.88772,
       0.88776, 0.88776, 0.88772, 0.88772, 0.88772, 0.8824 , 0.8824 ,
       0.88336, 0.8824 , 0.8824 , 0.88272, 0.87872, 0.87888, 0.88212,
       0.87872, 0.87868, 0.879  ]), 'std_test_score': array([0.00244622, 0.00238126, 0.00255625, 0.00244622, 0.00238126,
       0.00255625, 0.00492276, 0.00493056, 0.0049029 , 0.00492276,
       0.00492276, 0.0048309 , 0.00413957, 0.00416461, 0.00445313,
       0.00413957, 0.00413957, 0.00489669, 0.00397713, 0.0038504 ,
       0.00519323, 0.00397713, 0.00396101, 0.00506596]), 'rank_test_score': array([16, 18, 14, 16, 18, 14,  3,  1,  1,  3,  3,  6,  9,  9,  7,  9,  9,
        8, 22, 21, 13, 22, 24, 20])}
Test accuracy: 0.87788
Classification report:               precision    recall  f1-score   support

           0       0.87      0.88      0.88     12500
           1       0.88      0.87      0.88     12500

    accuracy                           0.88     25000
   macro avg       0.88      0.88      0.88     25000
weighted avg       0.88      0.88      0.88     25000

Running time: 201.10003185272217
knn starts
Best params: {'knn__algorithm': 'auto', 'knn__n_jobs': -1, 'knn__n_neighbors': 10, 'knn__weights': 'distance'}
Validation results: {'mean_fit_time': array([ 6.32417889,  8.75959182, 10.99930978, 10.87138386, 13.60681872,
       11.82743669, 12.8930275 , 13.76692696, 12.64636855, 13.46430054,
       11.71989827, 14.27743635, 11.37449508, 11.54679747, 12.75930352,
       10.37886438, 13.38674545, 11.78945799, 12.31535754, 13.05313478,
       12.5434279 , 14.29382644, 12.74331241, 13.17566557]), 'std_fit_time': array([0.33146825, 1.23939747, 0.77736783, 1.02898276, 2.27268706,
       1.32892071, 0.72940501, 1.15682694, 1.60435339, 1.14191584,
       0.3770207 , 2.08670674, 0.81587413, 1.30980055, 1.45212414,
       0.25722126, 2.50399567, 0.90787841, 1.74677474, 2.05866115,
       0.64978206, 1.81580902, 1.62783409, 1.30919721]), 'mean_score_time': array([15.71241608, 18.65573187, 13.77072573, 15.01721215, 13.01315904,
       12.74251289, 12.61498594, 12.85145144, 14.69259906, 10.40345154,
       16.47457991, 12.11687031, 13.8846611 , 16.35884509, 10.74425631,
       15.85613322, 13.07032537, 13.18386145, 13.21544275, 12.44028678,
       13.16846962, 11.97075429, 13.96481524,  8.02720895]), 'std_score_time': array([3.53406075, 1.20336318, 3.28057307, 1.69457607, 1.11272944,
       1.80642291, 2.20678392, 3.14096025, 2.38246901, 0.77043413,
       0.97296345, 2.37537404, 3.80709949, 1.75026258, 1.2587175 ,
       1.19290137, 2.48169626, 1.8646557 , 2.06517985, 1.5509179 ,
       0.43495543, 2.41749142, 1.31463291, 1.89356238]), 'param_knn__algorithm': masked_array(data=['auto', 'auto', 'auto', 'auto', 'auto', 'auto',
                   'ball_tree', 'ball_tree', 'ball_tree', 'ball_tree',
                   'ball_tree', 'ball_tree', 'kd_tree', 'kd_tree',
                   'kd_tree', 'kd_tree', 'kd_tree', 'kd_tree', 'brute',
                   'brute', 'brute', 'brute', 'brute', 'brute'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_knn__n_jobs': masked_array(data=[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_knn__n_neighbors': masked_array(data=[5, 5, 10, 10, 15, 15, 5, 5, 10, 10, 15, 15, 5, 5, 10,
                   10, 15, 15, 5, 5, 10, 10, 15, 15],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_knn__weights': masked_array(data=['uniform', 'distance', 'uniform', 'distance',
                   'uniform', 'distance', 'uniform', 'distance',
                   'uniform', 'distance', 'uniform', 'distance',
                   'uniform', 'distance', 'uniform', 'distance',
                   'uniform', 'distance', 'uniform', 'distance',
                   'uniform', 'distance', 'uniform', 'distance'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'knn__algorithm': 'auto', 'knn__n_jobs': -1, 'knn__n_neighbors': 5, 'knn__weights': 'uniform'}, {'knn__algorithm': 'auto', 'knn__n_jobs': -1, 'knn__n_neighbors': 5, 'knn__weights': 'distance'}, {'knn__algorithm': 'auto', 'knn__n_jobs': -1, 'knn__n_neighbors': 10, 'knn__weights': 'uniform'}, {'knn__algorithm': 'auto', 'knn__n_jobs': -1, 'knn__n_neighbors': 10, 'knn__weights': 'distance'}, {'knn__algorithm': 'auto', 'knn__n_jobs': -1, 'knn__n_neighbors': 15, 'knn__weights': 'uniform'}, {'knn__algorithm': 'auto', 'knn__n_jobs': -1, 'knn__n_neighbors': 15, 'knn__weights': 'distance'}, {'knn__algorithm': 'ball_tree', 'knn__n_jobs': -1, 'knn__n_neighbors': 5, 'knn__weights': 'uniform'}, {'knn__algorithm': 'ball_tree', 'knn__n_jobs': -1, 'knn__n_neighbors': 5, 'knn__weights': 'distance'}, {'knn__algorithm': 'ball_tree', 'knn__n_jobs': -1, 'knn__n_neighbors': 10, 'knn__weights': 'uniform'}, {'knn__algorithm': 'ball_tree', 'knn__n_jobs': -1, 'knn__n_neighbors': 10, 'knn__weights': 'distance'}, {'knn__algorithm': 'ball_tree', 'knn__n_jobs': -1, 'knn__n_neighbors': 15, 'knn__weights': 'uniform'}, {'knn__algorithm': 'ball_tree', 'knn__n_jobs': -1, 'knn__n_neighbors': 15, 'knn__weights': 'distance'}, {'knn__algorithm': 'kd_tree', 'knn__n_jobs': -1, 'knn__n_neighbors': 5, 'knn__weights': 'uniform'}, {'knn__algorithm': 'kd_tree', 'knn__n_jobs': -1, 'knn__n_neighbors': 5, 'knn__weights': 'distance'}, {'knn__algorithm': 'kd_tree', 'knn__n_jobs': -1, 'knn__n_neighbors': 10, 'knn__weights': 'uniform'}, {'knn__algorithm': 'kd_tree', 'knn__n_jobs': -1, 'knn__n_neighbors': 10, 'knn__weights': 'distance'}, {'knn__algorithm': 'kd_tree', 'knn__n_jobs': -1, 'knn__n_neighbors': 15, 'knn__weights': 'uniform'}, {'knn__algorithm': 'kd_tree', 'knn__n_jobs': -1, 'knn__n_neighbors': 15, 'knn__weights': 'distance'}, {'knn__algorithm': 'brute', 'knn__n_jobs': -1, 'knn__n_neighbors': 5, 'knn__weights': 'uniform'}, {'knn__algorithm': 'brute', 'knn__n_jobs': -1, 'knn__n_neighbors': 5, 'knn__weights': 'distance'}, {'knn__algorithm': 'brute', 'knn__n_jobs': -1, 'knn__n_neighbors': 10, 'knn__weights': 'uniform'}, {'knn__algorithm': 'brute', 'knn__n_jobs': -1, 'knn__n_neighbors': 10, 'knn__weights': 'distance'}, {'knn__algorithm': 'brute', 'knn__n_jobs': -1, 'knn__n_neighbors': 15, 'knn__weights': 'uniform'}, {'knn__algorithm': 'brute', 'knn__n_jobs': -1, 'knn__n_neighbors': 15, 'knn__weights': 'distance'}], 'split0_test_score': array([0.588 , 0.5892, 0.5408, 0.5764, 0.5484, 0.5498, 0.588 , 0.5892,
       0.5408, 0.5764, 0.5484, 0.5498, 0.588 , 0.5892, 0.5408, 0.5764,
       0.5484, 0.5498, 0.588 , 0.5892, 0.5408, 0.5764, 0.5484, 0.5498]), 'split1_test_score': array([0.6014, 0.6026, 0.5696, 0.6118, 0.5818, 0.5836, 0.6014, 0.6026,
       0.5696, 0.6118, 0.5818, 0.5836, 0.6014, 0.6026, 0.5696, 0.6118,
       0.5818, 0.5836, 0.6014, 0.6026, 0.5696, 0.6118, 0.5818, 0.5836]), 'split2_test_score': array([0.6034, 0.605 , 0.574 , 0.6214, 0.5982, 0.6   , 0.6034, 0.605 ,
       0.574 , 0.6214, 0.5982, 0.6   , 0.6034, 0.605 , 0.574 , 0.6214,
       0.5982, 0.6   , 0.6034, 0.605 , 0.574 , 0.6214, 0.5982, 0.6   ]), 'split3_test_score': array([0.5714, 0.5726, 0.555 , 0.581 , 0.586 , 0.5876, 0.5714, 0.5726,
       0.555 , 0.581 , 0.586 , 0.5876, 0.5714, 0.5726, 0.555 , 0.581 ,
       0.586 , 0.5876, 0.5714, 0.5726, 0.555 , 0.581 , 0.586 , 0.5876]), 'split4_test_score': array([0.6394, 0.6408, 0.595 , 0.6394, 0.6102, 0.611 , 0.6394, 0.6408,
       0.595 , 0.6394, 0.6102, 0.611 , 0.6394, 0.6408, 0.595 , 0.6394,
       0.6102, 0.611 , 0.6394, 0.6408, 0.595 , 0.6394, 0.6102, 0.611 ]), 'mean_test_score': array([0.60072, 0.60204, 0.56688, 0.606  , 0.58492, 0.5864 , 0.60072,
       0.60204, 0.56688, 0.606  , 0.58492, 0.5864 , 0.60072, 0.60204,
       0.56688, 0.606  , 0.58492, 0.5864 , 0.60072, 0.60204, 0.56688,
       0.606  , 0.58492, 0.5864 ]), 'std_test_score': array([0.02247331, 0.02255213, 0.01827637, 0.02403131, 0.02078484,
       0.02068313, 0.02247331, 0.02255213, 0.01827637, 0.02403131,
       0.02078484, 0.02068313, 0.02247331, 0.02255213, 0.01827637,
       0.02403131, 0.02078484, 0.02068313, 0.02247331, 0.02255213,
       0.01827637, 0.02403131, 0.02078484, 0.02068313]), 'rank_test_score': array([ 9,  5, 21,  1, 17, 13,  9,  5, 21,  1, 17, 13,  9,  5, 21,  1, 17,
       13,  9,  5, 21,  1, 17, 13])}
Test accuracy: 0.57844
Classification report:               precision    recall  f1-score   support

           0       0.55      0.94      0.69     12500
           1       0.79      0.21      0.34     12500

    accuracy                           0.58     25000
   macro avg       0.67      0.58      0.51     25000
weighted avg       0.67      0.58      0.51     25000

Running time: 347.30040407180786
ada starts
Best params: {'ada__base_estimator': DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_impurity_split=None,
                       min_samples_leaf=1, min_samples_split=2,
                       min_weight_fraction_leaf=0.0, presort='deprecated',
                       random_state=None, splitter='best'), 'ada__learning_rate': 0.1, 'ada__n_estimators': 1000}
Validation results: {'mean_fit_time': array([47.05012646, 48.10465932, 47.82816672, 48.06072435, 43.70566745,
       40.66795573]), 'std_fit_time': array([1.69043425, 2.40929253, 1.98140159, 2.13995778, 3.94930435,
       1.23036944]), 'mean_score_time': array([1.6021389 , 1.5387764 , 1.54407697, 1.55730991, 1.20890908,
       0.90788126]), 'std_score_time': array([0.04777343, 0.10788946, 0.04376264, 0.04137929, 0.25110664,
       0.04557286]), 'param_ada__base_estimator': masked_array(data=[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_impurity_split=None,
                       min_samples_leaf=1, min_samples_split=2,
                       min_weight_fraction_leaf=0.0, presort='deprecated',
                       random_state=None, splitter='best'),
                   DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_impurity_split=None,
                       min_samples_leaf=1, min_samples_split=2,
                       min_weight_fraction_leaf=0.0, presort='deprecated',
                       random_state=None, splitter='best'),
                   DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_impurity_split=None,
                       min_samples_leaf=1, min_samples_split=2,
                       min_weight_fraction_leaf=0.0, presort='deprecated',
                       random_state=None, splitter='best'),
                   DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_impurity_split=None,
                       min_samples_leaf=1, min_samples_split=2,
                       min_weight_fraction_leaf=0.0, presort='deprecated',
                       random_state=None, splitter='best'),
                   DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_impurity_split=None,
                       min_samples_leaf=1, min_samples_split=2,
                       min_weight_fraction_leaf=0.0, presort='deprecated',
                       random_state=None, splitter='best'),
                   DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_impurity_split=None,
                       min_samples_leaf=1, min_samples_split=2,
                       min_weight_fraction_leaf=0.0, presort='deprecated',
                       random_state=None, splitter='best')],
             mask=[False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_ada__learning_rate': masked_array(data=[1.0, 1.0, 1.0, 0.1, 0.1, 0.1],
             mask=[False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_ada__n_estimators': masked_array(data=[100, 500, 1000, 100, 500, 1000],
             mask=[False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'ada__base_estimator': DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_impurity_split=None,
                       min_samples_leaf=1, min_samples_split=2,
                       min_weight_fraction_leaf=0.0, presort='deprecated',
                       random_state=None, splitter='best'), 'ada__learning_rate': 1.0, 'ada__n_estimators': 100}, {'ada__base_estimator': DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_impurity_split=None,
                       min_samples_leaf=1, min_samples_split=2,
                       min_weight_fraction_leaf=0.0, presort='deprecated',
                       random_state=None, splitter='best'), 'ada__learning_rate': 1.0, 'ada__n_estimators': 500}, {'ada__base_estimator': DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_impurity_split=None,
                       min_samples_leaf=1, min_samples_split=2,
                       min_weight_fraction_leaf=0.0, presort='deprecated',
                       random_state=None, splitter='best'), 'ada__learning_rate': 1.0, 'ada__n_estimators': 1000}, {'ada__base_estimator': DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_impurity_split=None,
                       min_samples_leaf=1, min_samples_split=2,
                       min_weight_fraction_leaf=0.0, presort='deprecated',
                       random_state=None, splitter='best'), 'ada__learning_rate': 0.1, 'ada__n_estimators': 100}, {'ada__base_estimator': DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_impurity_split=None,
                       min_samples_leaf=1, min_samples_split=2,
                       min_weight_fraction_leaf=0.0, presort='deprecated',
                       random_state=None, splitter='best'), 'ada__learning_rate': 0.1, 'ada__n_estimators': 500}, {'ada__base_estimator': DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_impurity_split=None,
                       min_samples_leaf=1, min_samples_split=2,
                       min_weight_fraction_leaf=0.0, presort='deprecated',
                       random_state=None, splitter='best'), 'ada__learning_rate': 0.1, 'ada__n_estimators': 1000}], 'split0_test_score': array([0.7038, 0.7018, 0.7072, 0.7062, 0.7028, 0.7048]), 'split1_test_score': array([0.7094, 0.71  , 0.7084, 0.7052, 0.707 , 0.7034]), 'split2_test_score': array([0.7044, 0.697 , 0.7008, 0.7032, 0.7034, 0.704 ]), 'split3_test_score': array([0.7032, 0.7022, 0.7026, 0.701 , 0.703 , 0.705 ]), 'split4_test_score': array([0.703 , 0.6954, 0.7012, 0.6986, 0.6962, 0.7072]), 'mean_test_score': array([0.70476, 0.70128, 0.70404, 0.70284, 0.70248, 0.70488]), 'std_test_score': array([0.00237116, 0.00509996, 0.00315062, 0.00276955, 0.00349537,
       0.00129368]), 'rank_test_score': array([2, 6, 3, 4, 5, 1])}
Test accuracy: 0.70764
Classification report:               precision    recall  f1-score   support

           0       0.71      0.71      0.71     12500
           1       0.71      0.71      0.71     12500

    accuracy                           0.71     25000
   macro avg       0.71      0.71      0.71     25000
weighted avg       0.71      0.71      0.71     25000

Running time: 193.058429479599
nb starts
Best params: {'nb__alpha': 1.0, 'nb__fit_prior': True}
Validation results: {'mean_fit_time': array([6.05433235, 6.70416646, 6.37555394, 5.99377279]), 'std_fit_time': array([0.24546862, 0.29944516, 0.64651864, 0.28645853]), 'mean_score_time': array([1.60328379, 1.65405388, 1.35942259, 0.92748227]), 'std_score_time': array([0.08134693, 0.06584993, 0.22518571, 0.13894837]), 'param_nb__alpha': masked_array(data=[1.0, 1.0, 0.0, 0.0],
             mask=[False, False, False, False],
       fill_value='?',
            dtype=object), 'param_nb__fit_prior': masked_array(data=[True, False, True, False],
             mask=[False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'nb__alpha': 1.0, 'nb__fit_prior': True}, {'nb__alpha': 1.0, 'nb__fit_prior': False}, {'nb__alpha': 0.0, 'nb__fit_prior': True}, {'nb__alpha': 0.0, 'nb__fit_prior': False}], 'split0_test_score': array([0.8454, 0.8454, 0.7404, 0.7404]), 'split1_test_score': array([0.8386, 0.8386, 0.7364, 0.7364]), 'split2_test_score': array([0.8488, 0.8488, 0.7466, 0.7466]), 'split3_test_score': array([0.8482, 0.8482, 0.7396, 0.7396]), 'split4_test_score': array([0.8422, 0.8422, 0.731 , 0.731 ]), 'mean_test_score': array([0.84464, 0.84464, 0.7388 , 0.7388 ]), 'std_test_score': array([0.00382079, 0.00382079, 0.00511156, 0.00511156]), 'rank_test_score': array([1, 1, 3, 3])}
Test accuracy: 0.7928
Classification report:               precision    recall  f1-score   support

           0       0.76      0.86      0.81     12500
           1       0.83      0.73      0.78     12500

    accuracy                           0.79     25000
   macro avg       0.80      0.79      0.79     25000
weighted avg       0.80      0.79      0.79     25000

Running time: 30.81338095664978
