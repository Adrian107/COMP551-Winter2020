rf starts
Best params: {'rf__max_depth': 500, 'rf__max_features': 50, 'rf__n_estimators': 500, 'rf__n_jobs': 5}
Validation results: {'mean_fit_time': array([ 21.23405757, 105.67876925,  46.28973007, 138.10502639,
        42.53467669, 122.21591258,  48.58921437, 137.87156029,
        43.37899413, 123.98769937,  46.22456684,  91.71475487]), 'std_fit_time': array([ 3.05660989,  1.00273656,  5.01439915,  2.45454231,  3.67350885,
        7.4626633 ,  5.90764431,  3.34334351,  2.90288932,  4.13437783,
        4.86192234, 12.47840784]), 'mean_score_time': array([10.99251423,  9.24371448, 12.0119308 , 14.95304928, 12.62118278,
       11.21238818,  9.81059031, 15.3370295 , 10.61532998,  9.85136681,
       10.72806568,  2.53774819]), 'std_score_time': array([1.53378573, 1.17078983, 1.83895835, 0.63363014, 2.37825822,
       0.75659479, 2.24902811, 2.67877976, 1.27975537, 3.34639771,
       2.66830417, 1.40841174]), 'param_rf__max_depth': masked_array(data=[500, 500, 500, 500, 1000, 1000, 1000, 1000, 2000, 2000,
                   2000, 2000],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_rf__max_features': masked_array(data=[10, 10, 50, 50, 10, 10, 50, 50, 10, 10, 50, 50],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_rf__n_estimators': masked_array(data=[100, 500, 100, 500, 100, 500, 100, 500, 100, 500, 100,
                   500],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_rf__n_jobs': masked_array(data=[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'rf__max_depth': 500, 'rf__max_features': 10, 'rf__n_estimators': 100, 'rf__n_jobs': 5}, {'rf__max_depth': 500, 'rf__max_features': 10, 'rf__n_estimators': 500, 'rf__n_jobs': 5}, {'rf__max_depth': 500, 'rf__max_features': 50, 'rf__n_estimators': 100, 'rf__n_jobs': 5}, {'rf__max_depth': 500, 'rf__max_features': 50, 'rf__n_estimators': 500, 'rf__n_jobs': 5}, {'rf__max_depth': 1000, 'rf__max_features': 10, 'rf__n_estimators': 100, 'rf__n_jobs': 5}, {'rf__max_depth': 1000, 'rf__max_features': 10, 'rf__n_estimators': 500, 'rf__n_jobs': 5}, {'rf__max_depth': 1000, 'rf__max_features': 50, 'rf__n_estimators': 100, 'rf__n_jobs': 5}, {'rf__max_depth': 1000, 'rf__max_features': 50, 'rf__n_estimators': 500, 'rf__n_jobs': 5}, {'rf__max_depth': 2000, 'rf__max_features': 10, 'rf__n_estimators': 100, 'rf__n_jobs': 5}, {'rf__max_depth': 2000, 'rf__max_features': 10, 'rf__n_estimators': 500, 'rf__n_jobs': 5}, {'rf__max_depth': 2000, 'rf__max_features': 50, 'rf__n_estimators': 100, 'rf__n_jobs': 5}, {'rf__max_depth': 2000, 'rf__max_features': 50, 'rf__n_estimators': 500, 'rf__n_jobs': 5}], 'split0_test_score': array([0.8278, 0.8658, 0.8422, 0.8666, 0.832 , 0.8642, 0.837 , 0.8614,
       0.8328, 0.8662, 0.8432, 0.8642]), 'split1_test_score': array([0.8316, 0.8618, 0.8474, 0.8656, 0.8266, 0.8652, 0.8456, 0.863 ,
       0.8252, 0.8628, 0.8338, 0.8616]), 'split2_test_score': array([0.83  , 0.8714, 0.8542, 0.8752, 0.838 , 0.8686, 0.855 , 0.8714,
       0.8414, 0.876 , 0.8506, 0.8726]), 'split3_test_score': array([0.8316, 0.8618, 0.8362, 0.8616, 0.835 , 0.8604, 0.8384, 0.8616,
       0.8306, 0.861 , 0.8414, 0.862 ]), 'split4_test_score': array([0.8256, 0.8606, 0.8432, 0.8678, 0.8322, 0.8662, 0.8464, 0.867 ,
       0.8304, 0.8642, 0.8332, 0.8656]), 'mean_test_score': array([0.82932, 0.86428, 0.84464, 0.86736, 0.83276, 0.86492, 0.84448,
       0.86488, 0.83208, 0.86604, 0.84044, 0.8652 ]), 'std_test_score': array([0.00232413, 0.0039711 , 0.00597113, 0.00443874, 0.00377656,
       0.00269102, 0.00645799, 0.00383166, 0.00528636, 0.00526331,
       0.00645402, 0.00397794]), 'rank_test_score': array([12,  6,  7,  1, 10,  4,  8,  5, 11,  2,  9,  3])}
Test accuracy: 0.86228
Classification report:               precision    recall  f1-score   support

           0       0.87      0.85      0.86     12500
           1       0.86      0.87      0.86     12500

    accuracy                           0.86     25000
   macro avg       0.86      0.86      0.86     25000
weighted avg       0.86      0.86      0.86     25000

Running time: 582.6746537685394
dt starts
Best params: {'dt__max_features': 'auto', 'dt__splitter': 'random'}
Validation results: {'mean_fit_time': array([4.00669427, 4.68132339, 4.36790233, 3.77164416]), 'std_fit_time': array([0.27308264, 0.20429451, 0.55952538, 0.20964166]), 'mean_score_time': array([0.83032522, 0.90708146, 0.73338089, 0.51631083]), 'std_score_time': array([0.11405821, 0.01435314, 0.16349769, 0.05034233]), 'param_dt__max_features': masked_array(data=['auto', 'auto', 'log2', 'log2'],
             mask=[False, False, False, False],
       fill_value='?',
            dtype=object), 'param_dt__splitter': masked_array(data=['best', 'random', 'best', 'random'],
             mask=[False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'dt__max_features': 'auto', 'dt__splitter': 'best'}, {'dt__max_features': 'auto', 'dt__splitter': 'random'}, {'dt__max_features': 'log2', 'dt__splitter': 'best'}, {'dt__max_features': 'log2', 'dt__splitter': 'random'}], 'split0_test_score': array([0.6492, 0.6342, 0.5872, 0.5908]), 'split1_test_score': array([0.6338, 0.6396, 0.5786, 0.594 ]), 'split2_test_score': array([0.6492, 0.6506, 0.5936, 0.6088]), 'split3_test_score': array([0.6434, 0.6404, 0.5838, 0.5924]), 'split4_test_score': array([0.6496, 0.665 , 0.5764, 0.5964]), 'mean_test_score': array([0.64504, 0.64596, 0.58392, 0.59648]), 'std_test_score': array([0.00607342, 0.0108969 , 0.0061535 , 0.00643192]), 'rank_test_score': array([2, 1, 4, 3])}
Test accuracy: 0.63068
Classification report:               precision    recall  f1-score   support

           0       0.63      0.63      0.63     12500
           1       0.63      0.63      0.63     12500

    accuracy                           0.63     25000
   macro avg       0.63      0.63      0.63     25000
weighted avg       0.63      0.63      0.63     25000

Running time: 20.160475730895996
svm starts
Best params: {'svm__C': 0.1, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}
Validation results: {'mean_fit_time': array([ 3.14959769,  4.20719409,  5.477668  ,  5.20342441,  3.83580575,
        4.36710281,  5.30216832,  5.4852632 ,  3.88557792,  4.24976964,
        5.31056333,  5.46547451,  3.80002699,  4.27035818,  5.39211636,
        5.32295589,  4.0518826 ,  5.22681131,  7.39697075,  7.40156736,
        3.97512665,  5.13646278,  7.32801037,  7.29902554,  4.00970664,
        5.44808507,  7.4855195 ,  7.29063077,  3.99251699,  5.23560658,
        7.59885497,  7.3274096 ,  3.88158035,  5.68315048,  9.88474751,
        9.23831701,  4.0420886 ,  6.21664534,  9.79519901,  9.46818528,
        4.0210999 , 11.42306848, 10.34308558,  9.61989832,  3.93255162,
       11.5609899 , 10.27752261,  9.34445624,  3.88557858,  7.01039171,
        9.41221766,  9.66467295,  3.99351625,  6.72435493,  9.83937387,
        9.22692289,  3.84979863, 12.10647769,  9.94031763,  9.54654088,
        3.89297366, 19.81786857, 10.11961412,  8.3400373 ]), 'std_fit_time': array([0.1976316 , 0.08487241, 0.42891621, 0.17381831, 0.15603719,
       0.22881481, 0.25917033, 0.440597  , 0.16064333, 0.0650853 ,
       0.0386439 , 0.78464807, 0.30820943, 0.02072876, 0.1657763 ,
       0.42150249, 0.14060814, 0.11109661, 0.36250366, 0.30605089,
       0.13280247, 0.19413042, 0.29267967, 0.39445037, 0.11288674,
       0.56150324, 0.43123967, 0.53556348, 0.10073622, 0.22023142,
       0.2081281 , 0.5639473 , 0.29244627, 0.27798701, 0.4498792 ,
       0.4886109 , 0.08811657, 0.32564255, 0.55291716, 0.52625098,
       0.09925448, 0.5328987 , 0.50448392, 0.64008215, 0.23454812,
       0.43791156, 0.65607082, 0.52132767, 0.11693775, 0.68402696,
       0.83756466, 0.60375816, 0.08911459, 0.34803654, 0.39765049,
       0.63750123, 0.23104688, 0.31718251, 0.81621094, 0.7061902 ,
       0.2098762 , 0.25554092, 0.91408389, 1.40672996]), 'mean_score_time': array([0.        , 0.86910348, 0.97184448, 0.84951477, 0.        ,
       0.88629408, 0.86210723, 1.01701865, 0.        , 0.86750364,
       0.85850902, 1.01901703, 0.        , 0.81433477, 0.84231815,
       0.99043407, 0.        , 0.88469467, 0.87869763, 0.91627584,
       0.        , 0.89608803, 0.87170138, 0.92067418, 0.        ,
       0.84591622, 0.89868684, 0.90268397, 0.        , 0.87350016,
       0.87689838, 0.99243321, 0.        , 0.90908093, 0.87489939,
       0.93466549, 0.        , 0.90188427, 0.7647634 , 0.89708738,
       0.        , 0.96524806, 0.9018837 , 0.88569384, 0.        ,
       0.84871416, 0.88109641, 0.76796074, 0.        , 0.84011922,
       0.79194736, 0.85690975, 0.        , 0.88709292, 0.89288902,
       0.9162766 , 0.        , 0.90828028, 0.85551009, 0.93006849,
       0.        , 0.66701851, 0.86670499, 0.5241004 ]), 'std_score_time': array([0.        , 0.08780463, 0.11909538, 0.0462553 , 0.        ,
       0.04617046, 0.05423349, 0.22180217, 0.        , 0.07981944,
       0.0352676 , 0.26306638, 0.        , 0.0933947 , 0.10372597,
       0.17454597, 0.        , 0.03663604, 0.03177718, 0.13993319,
       0.        , 0.08778012, 0.01000177, 0.01824772, 0.        ,
       0.09134201, 0.0284896 , 0.09979788, 0.        , 0.10634587,
       0.01640564, 0.1617202 , 0.        , 0.11203674, 0.01882126,
       0.11122597, 0.        , 0.01088547, 0.13468259, 0.02230854,
       0.        , 0.27192851, 0.04239064, 0.05502254, 0.        ,
       0.09181587, 0.01614783, 0.15703154, 0.        , 0.09802279,
       0.10482011, 0.09257629, 0.        , 0.02646226, 0.031163  ,
       0.05375167, 0.        , 0.05816077, 0.10051159, 0.02811583,
       0.        , 0.19133016, 0.0823766 , 0.0896809 ]), 'param_svm__C': masked_array(data=[0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                   0.1, 0.1, 0.1, 0.1, 0.1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                   1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10, 10, 10, 10, 10,
                   10, 10, 10, 10, 10, 10, 10, 100, 100, 100, 100, 100,
                   100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_svm__loss': masked_array(data=['hinge', 'hinge', 'hinge', 'hinge', 'hinge', 'hinge',
                   'hinge', 'hinge', 'squared_hinge', 'squared_hinge',
                   'squared_hinge', 'squared_hinge', 'squared_hinge',
                   'squared_hinge', 'squared_hinge', 'squared_hinge',
                   'hinge', 'hinge', 'hinge', 'hinge', 'hinge', 'hinge',
                   'hinge', 'hinge', 'squared_hinge', 'squared_hinge',
                   'squared_hinge', 'squared_hinge', 'squared_hinge',
                   'squared_hinge', 'squared_hinge', 'squared_hinge',
                   'hinge', 'hinge', 'hinge', 'hinge', 'hinge', 'hinge',
                   'hinge', 'hinge', 'squared_hinge', 'squared_hinge',
                   'squared_hinge', 'squared_hinge', 'squared_hinge',
                   'squared_hinge', 'squared_hinge', 'squared_hinge',
                   'hinge', 'hinge', 'hinge', 'hinge', 'hinge', 'hinge',
                   'hinge', 'hinge', 'squared_hinge', 'squared_hinge',
                   'squared_hinge', 'squared_hinge', 'squared_hinge',
                   'squared_hinge', 'squared_hinge', 'squared_hinge'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_svm__max_iter': masked_array(data=[1000, 1000, 1000, 1000, 2000, 2000, 2000, 2000, 1000,
                   1000, 1000, 1000, 2000, 2000, 2000, 2000, 1000, 1000,
                   1000, 1000, 2000, 2000, 2000, 2000, 1000, 1000, 1000,
                   1000, 2000, 2000, 2000, 2000, 1000, 1000, 1000, 1000,
                   2000, 2000, 2000, 2000, 1000, 1000, 1000, 1000, 2000,
                   2000, 2000, 2000, 1000, 1000, 1000, 1000, 2000, 2000,
                   2000, 2000, 1000, 1000, 1000, 1000, 2000, 2000, 2000,
                   2000],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_svm__multi_class': masked_array(data=['ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer',
                   'ovr', 'ovr', 'crammer_singer', 'crammer_singer'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_svm__penalty': masked_array(data=['l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1',
                   'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2',
                   'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1',
                   'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2',
                   'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1',
                   'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2',
                   'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1', 'l2', 'l1',
                   'l2'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'svm__C': 0.1, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 0.1, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 0.1, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 0.1, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 0.1, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 0.1, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 0.1, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 0.1, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 0.1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 0.1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 0.1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 0.1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 0.1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 0.1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 0.1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 0.1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 1, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 1, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 1, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 1, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 1, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 1, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 1, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 1, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 1, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 10, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 10, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 10, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 10, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 10, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 10, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 10, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 10, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 10, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 10, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 10, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 10, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 10, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 10, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 10, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 10, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 100, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 100, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 100, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 100, 'svm__loss': 'hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 100, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 100, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 100, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 100, 'svm__loss': 'hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 100, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 100, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 100, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 100, 'svm__loss': 'squared_hinge', 'svm__max_iter': 1000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}, {'svm__C': 100, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l1'}, {'svm__C': 100, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'ovr', 'svm__penalty': 'l2'}, {'svm__C': 100, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l1'}, {'svm__C': 100, 'svm__loss': 'squared_hinge', 'svm__max_iter': 2000, 'svm__multi_class': 'crammer_singer', 'svm__penalty': 'l2'}], 'split0_test_score': array([   nan, 0.887 , 0.8788, 0.8788,    nan, 0.887 , 0.8788, 0.8788,
          nan, 0.8826, 0.8788, 0.8788,    nan, 0.8826, 0.8788, 0.8788,
          nan, 0.8608, 0.8516, 0.8516,    nan, 0.8608, 0.8516, 0.8516,
          nan, 0.865 , 0.8516, 0.8516,    nan, 0.865 , 0.8516, 0.8516,
          nan, 0.8486, 0.8486, 0.8486,    nan, 0.8486, 0.8486, 0.8486,
          nan, 0.851 , 0.8486, 0.8486,    nan, 0.851 , 0.8486, 0.8486,
          nan, 0.8486, 0.8486, 0.8486,    nan, 0.8486, 0.8486, 0.8486,
          nan, 0.8496, 0.8486, 0.8486,    nan, 0.8498, 0.8486, 0.8486]), 'split1_test_score': array([   nan, 0.8796, 0.8728, 0.8728,    nan, 0.8796, 0.8728, 0.8728,
          nan, 0.8776, 0.8728, 0.8728,    nan, 0.8776, 0.8728, 0.8728,
          nan, 0.8552, 0.8458, 0.8458,    nan, 0.8552, 0.8458, 0.8458,
          nan, 0.8558, 0.8458, 0.8458,    nan, 0.8558, 0.8458, 0.8458,
          nan, 0.8454, 0.8448, 0.8448,    nan, 0.8454, 0.8448, 0.8448,
          nan, 0.8456, 0.8448, 0.8448,    nan, 0.8456, 0.8448, 0.8448,
          nan, 0.8448, 0.8448, 0.8448,    nan, 0.8448, 0.8448, 0.8448,
          nan, 0.845 , 0.8448, 0.8448,    nan, 0.8452, 0.8448, 0.8448]), 'split2_test_score': array([   nan, 0.8848, 0.8824, 0.8824,    nan, 0.8848, 0.8824, 0.8824,
          nan, 0.8806, 0.8824, 0.8824,    nan, 0.8806, 0.8824, 0.8824,
          nan, 0.8604, 0.8548, 0.8548,    nan, 0.8604, 0.8548, 0.8548,
          nan, 0.8638, 0.8548, 0.8548,    nan, 0.8638, 0.8548, 0.8548,
          nan, 0.8524, 0.8524, 0.8524,    nan, 0.8524, 0.8524, 0.8524,
          nan, 0.8538, 0.8524, 0.8524,    nan, 0.8538, 0.8524, 0.8524,
          nan, 0.8524, 0.8524, 0.8524,    nan, 0.8524, 0.8524, 0.8524,
          nan, 0.853 , 0.8524, 0.8524,    nan, 0.853 , 0.8524, 0.8524]), 'split3_test_score': array([   nan, 0.8848, 0.8768, 0.8768,    nan, 0.8848, 0.8768, 0.8768,
          nan, 0.879 , 0.8768, 0.8768,    nan, 0.879 , 0.8768, 0.8768,
          nan, 0.857 , 0.853 , 0.853 ,    nan, 0.857 , 0.853 , 0.853 ,
          nan, 0.8616, 0.853 , 0.853 ,    nan, 0.8616, 0.853 , 0.853 ,
          nan, 0.8508, 0.8492, 0.8492,    nan, 0.8508, 0.8492, 0.8492,
          nan, 0.8518, 0.8492, 0.8492,    nan, 0.8518, 0.8492, 0.8492,
          nan, 0.8492, 0.8492, 0.8492,    nan, 0.8492, 0.8492, 0.8492,
          nan, 0.8498, 0.8492, 0.8492,    nan, 0.85  , 0.8492, 0.8492]), 'split4_test_score': array([   nan, 0.8798, 0.8732, 0.8732,    nan, 0.8798, 0.8732, 0.8732,
          nan, 0.8768, 0.8732, 0.8732,    nan, 0.8768, 0.8732, 0.8732,
          nan, 0.856 , 0.8496, 0.8496,    nan, 0.856 , 0.8496, 0.8496,
          nan, 0.8568, 0.8496, 0.8496,    nan, 0.8568, 0.8496, 0.8496,
          nan, 0.8462, 0.8446, 0.8446,    nan, 0.8462, 0.8446, 0.8446,
          nan, 0.8486, 0.8446, 0.8446,    nan, 0.8486, 0.8446, 0.8446,
          nan, 0.8446, 0.8446, 0.8446,    nan, 0.8446, 0.8446, 0.8446,
          nan, 0.8444, 0.8446, 0.8446,    nan, 0.8446, 0.8446, 0.8446]), 'mean_test_score': array([    nan, 0.8832 , 0.8768 , 0.8768 ,     nan, 0.8832 , 0.8768 ,
       0.8768 ,     nan, 0.87932, 0.8768 , 0.8768 ,     nan, 0.87932,
       0.8768 , 0.8768 ,     nan, 0.85788, 0.85096, 0.85096,     nan,
       0.85788, 0.85096, 0.85096,     nan, 0.8606 , 0.85096, 0.85096,
           nan, 0.8606 , 0.85096, 0.85096,     nan, 0.84868, 0.84792,
       0.84792,     nan, 0.84868, 0.84792, 0.84792,     nan, 0.85016,
       0.84792, 0.84792,     nan, 0.85016, 0.84792, 0.84792,     nan,
       0.84792, 0.84792, 0.84792,     nan, 0.84792, 0.84792, 0.84792,
           nan, 0.84836, 0.84792, 0.84792,     nan, 0.84852, 0.84792,
       0.84792]), 'std_test_score': array([       nan, 0.00296917, 0.00358664, 0.00358664,        nan,
       0.00296917, 0.00358664, 0.00358664,        nan, 0.00208844,
       0.00358664, 0.00358664,        nan, 0.00208844, 0.00358664,
       0.00358664,        nan, 0.00229643, 0.00309167, 0.00309167,
              nan, 0.00229643, 0.00309167, 0.00309167,        nan,
       0.00368999, 0.00309167, 0.00309167,        nan, 0.00368999,
       0.00309167, 0.00309167,        nan, 0.00265511, 0.00293012,
       0.00293012,        nan, 0.00265511, 0.00293012, 0.00293012,
              nan, 0.0028239 , 0.00293012, 0.00293012,        nan,
       0.0028239 , 0.00293012, 0.00293012,        nan, 0.00293012,
       0.00293012, 0.00293012,        nan, 0.00293012, 0.00293012,
       0.00293012,        nan, 0.00322837, 0.00293012, 0.00293012,
              nan, 0.00317137, 0.00293012, 0.00293012]), 'rank_test_score': array([64,  1,  5,  5, 49,  1,  5,  5, 51,  3,  5,  5, 52,  3,  5,  5, 53,
       15, 17, 17, 55, 15, 17, 17, 63, 13, 17, 17, 56, 13, 17, 17, 59, 27,
       31, 31, 61, 27, 31, 31, 57, 25, 31, 31, 62, 25, 31, 31, 60, 31, 31,
       31, 58, 31, 31, 31, 54, 30, 31, 31, 50, 29, 31, 31])}

logistic starts
Best params: {'logistic__C': 1, 'logistic__max_iter': 100, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'newton-cg'}
Validation results: {'mean_fit_time': array([ 6.33837118,  5.3061666 ,  5.7227448 ,  6.73786817,  5.01180873,
        5.29234405,  7.22884851,  6.17506957,  7.42875228,  7.29023151,
        6.0017674 ,  7.5430408 ,  7.73512955,  6.78359065, 10.34128656,
        7.78554802,  8.47675343, 19.36192875,  8.76338892,  6.53286319,
       10.20711989,  8.73056316,  9.45158572, 21.13231544]), 'std_fit_time': array([0.39779994, 0.29497229, 0.33242122, 0.32365275, 0.14477757,
       0.1840199 , 0.21056349, 0.35138485, 0.10926058, 0.2924399 ,
       0.28123146, 0.09625853, 0.11977702, 0.17001382, 0.06912478,
       0.10983595, 0.58328817, 1.36565948, 0.29520936, 0.08408453,
       0.22486231, 0.15849408, 0.53019262, 0.41438226]), 'mean_score_time': array([0.91807446, 1.08178072, 0.94665909, 0.8645957 , 0.89220815,
       0.88649349, 0.876299  , 0.93386512, 0.87210159, 0.98243766,
       0.8163332 , 0.92247276, 0.86970286, 0.84271832, 0.88369651,
       0.85631051, 0.89768629, 0.84511662, 0.81313529, 0.80793881,
       0.86430564, 0.8780973 , 0.67901254, 0.49033103]), 'std_score_time': array([0.02865777, 0.16499277, 0.04487669, 0.02294516, 0.03479735,
       0.02726123, 0.01714105, 0.04418236, 0.05160937, 0.2047053 ,
       0.06906705, 0.05153342, 0.03634682, 0.05045807, 0.04112409,
       0.07128192, 0.03798631, 0.05304469, 0.10443702, 0.02406606,
       0.05399638, 0.05329672, 0.09920729, 0.01819267]), 'param_logistic__C': masked_array(data=[0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 1, 1, 1, 1, 1, 1, 10, 10,
                   10, 10, 10, 10, 100, 100, 100, 100, 100, 100],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_logistic__max_iter': masked_array(data=[100, 100, 100, 500, 500, 500, 100, 100, 100, 500, 500,
                   500, 100, 100, 100, 500, 500, 500, 100, 100, 100, 500,
                   500, 500],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_logistic__n_jobs': masked_array(data=[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_logistic__penalty': masked_array(data=['l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_logistic__solver': masked_array(data=['newton-cg', 'lbfgs', 'sag', 'newton-cg', 'lbfgs',
                   'sag', 'newton-cg', 'lbfgs', 'sag', 'newton-cg',
                   'lbfgs', 'sag', 'newton-cg', 'lbfgs', 'sag',
                   'newton-cg', 'lbfgs', 'sag', 'newton-cg', 'lbfgs',
                   'sag', 'newton-cg', 'lbfgs', 'sag'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'logistic__C': 0.1, 'logistic__max_iter': 100, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'newton-cg'}, {'logistic__C': 0.1, 'logistic__max_iter': 100, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'lbfgs'}, {'logistic__C': 0.1, 'logistic__max_iter': 100, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'sag'}, {'logistic__C': 0.1, 'logistic__max_iter': 500, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'newton-cg'}, {'logistic__C': 0.1, 'logistic__max_iter': 500, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'lbfgs'}, {'logistic__C': 0.1, 'logistic__max_iter': 500, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'sag'}, {'logistic__C': 1, 'logistic__max_iter': 100, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'newton-cg'}, {'logistic__C': 1, 'logistic__max_iter': 100, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'lbfgs'}, {'logistic__C': 1, 'logistic__max_iter': 100, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'sag'}, {'logistic__C': 1, 'logistic__max_iter': 500, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'newton-cg'}, {'logistic__C': 1, 'logistic__max_iter': 500, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'lbfgs'}, {'logistic__C': 1, 'logistic__max_iter': 500, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'sag'}, {'logistic__C': 10, 'logistic__max_iter': 100, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'newton-cg'}, {'logistic__C': 10, 'logistic__max_iter': 100, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'lbfgs'}, {'logistic__C': 10, 'logistic__max_iter': 100, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'sag'}, {'logistic__C': 10, 'logistic__max_iter': 500, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'newton-cg'}, {'logistic__C': 10, 'logistic__max_iter': 500, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'lbfgs'}, {'logistic__C': 10, 'logistic__max_iter': 500, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'sag'}, {'logistic__C': 100, 'logistic__max_iter': 100, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'newton-cg'}, {'logistic__C': 100, 'logistic__max_iter': 100, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'lbfgs'}, {'logistic__C': 100, 'logistic__max_iter': 100, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'sag'}, {'logistic__C': 100, 'logistic__max_iter': 500, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'newton-cg'}, {'logistic__C': 100, 'logistic__max_iter': 500, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'lbfgs'}, {'logistic__C': 100, 'logistic__max_iter': 500, 'logistic__n_jobs': -1, 'logistic__penalty': 'l2', 'logistic__solver': 'sag'}], 'split0_test_score': array([0.8834, 0.8834, 0.8834, 0.8834, 0.8834, 0.8834, 0.8836, 0.8836,
       0.8834, 0.8836, 0.8836, 0.8834, 0.8734, 0.8732, 0.874 , 0.8734,
       0.8734, 0.8734, 0.869 , 0.8684, 0.871 , 0.869 , 0.8692, 0.8686]), 'split1_test_score': array([0.8804, 0.8804, 0.8802, 0.8804, 0.8804, 0.8802, 0.881 , 0.881 ,
       0.881 , 0.881 , 0.881 , 0.881 , 0.8708, 0.8716, 0.872 , 0.8708,
       0.8708, 0.8716, 0.8596, 0.86  , 0.8698, 0.8596, 0.8596, 0.8618]), 'split2_test_score': array([0.886 , 0.886 , 0.886 , 0.886 , 0.886 , 0.886 , 0.8866, 0.8866,
       0.8866, 0.8866, 0.8866, 0.8866, 0.8722, 0.873 , 0.8738, 0.8722,
       0.8722, 0.8736, 0.868 , 0.868 , 0.8714, 0.868 , 0.868 , 0.868 ]), 'split3_test_score': array([0.8804, 0.8804, 0.8804, 0.8804, 0.8804, 0.8804, 0.8818, 0.8818,
       0.8818, 0.8818, 0.8818, 0.8818, 0.8712, 0.8712, 0.8726, 0.8712,
       0.8712, 0.8716, 0.8648, 0.864 , 0.8684, 0.8648, 0.8648, 0.8662]), 'split4_test_score': array([0.8756, 0.8756, 0.8756, 0.8756, 0.8756, 0.8756, 0.8772, 0.8772,
       0.8772, 0.8772, 0.8772, 0.8772, 0.8674, 0.8676, 0.8702, 0.8674,
       0.8674, 0.8676, 0.8594, 0.8606, 0.8678, 0.8594, 0.8594, 0.8616]), 'mean_test_score': array([0.88116, 0.88116, 0.88112, 0.88116, 0.88116, 0.88112, 0.88204,
       0.88204, 0.882  , 0.88204, 0.88204, 0.882  , 0.871  , 0.87132,
       0.87252, 0.871  , 0.871  , 0.87156, 0.86416, 0.8642 , 0.86968,
       0.86416, 0.8642 , 0.86524]), 'std_test_score': array([0.00347885, 0.00347885, 0.0034885 , 0.00347885, 0.00347885,
       0.0034885 , 0.00309167, 0.00309167, 0.00307246, 0.00309167,
       0.00309167, 0.00307246, 0.00201196, 0.00201435, 0.00137753,
       0.00201196, 0.00201196, 0.00215555, 0.00405048, 0.00354175,
       0.00140627, 0.00405048, 0.00409878, 0.00299707]), 'rank_test_score': array([ 7,  7, 11,  7,  7, 11,  1,  1,  5,  1,  1,  5, 16, 15, 13, 16, 16,
       14, 23, 21, 19, 23, 21, 20])}
Test accuracy: 0.87188
Classification report:               precision    recall  f1-score   support

           0       0.98      0.98      0.98     12500
           1       0.98      0.98      0.98     12500

    accuracy                           0.98     25000
   macro avg       0.98      0.98      0.98     25000
weighted avg       0.98      0.98      0.98     25000

Running time: 123.78319191932678
knn starts
Best params: {'knn__algorithm': 'auto', 'knn__n_jobs': -1, 'knn__n_neighbors': 10, 'knn__weights': 'distance'}
Validation results: {'mean_fit_time': array([3.44581985, 6.27821126, 5.57046146, 6.99273949, 6.759097  ,
       5.83487878, 7.62387581, 5.78997679, 7.56349058, 6.47855868,
       6.48256373, 6.74885778, 5.80926557, 7.18806829, 6.77518244,
       7.13513622, 7.03120403, 6.2490202 , 8.16196098, 5.75031109,
       7.85850053, 6.57015648, 6.44961748, 6.53623428]), 'std_fit_time': array([0.57628444, 1.66719884, 1.8249279 , 1.52926703, 1.36933757,
       0.33803505, 0.92534393, 0.48342391, 0.82004351, 1.82393007,
       0.84264915, 1.80492794, 0.89418027, 0.87843815, 2.5114938 ,
       0.30890023, 0.87379087, 0.32870246, 1.01643445, 0.32816008,
       1.22488412, 1.2763363 , 0.58210421, 1.78155472]), 'mean_score_time': array([13.26376595, 11.93172302, 12.4563189 , 11.61844726,  9.47980728,
       13.61165199, 10.10358458, 12.92260103, 11.64428525, 10.88030901,
       12.45629969, 10.68349524, 12.7594461 , 10.28882842, 10.90630088,
       11.61355872,  9.14067259, 13.17365637,  9.37967458, 13.41816325,
       10.55052462, 10.98520203, 12.69718666,  6.4720252 ]), 'std_score_time': array([0.5671932 , 1.9956374 , 1.99162707, 1.07303953, 1.7859156 ,
       0.84790578, 2.34156171, 1.63360238, 1.51099168, 3.15213063,
       1.14931662, 2.52468378, 1.56768902, 0.99225638, 1.2205979 ,
       0.25076364, 2.24375228, 0.64664251, 0.70527618, 0.52404743,
       1.74732401, 2.50071493, 1.09579366, 2.54282368]), 'param_knn__algorithm': masked_array(data=['auto', 'auto', 'auto', 'auto', 'auto', 'auto',
                   'ball_tree', 'ball_tree', 'ball_tree', 'ball_tree',
                   'ball_tree', 'ball_tree', 'kd_tree', 'kd_tree',
                   'kd_tree', 'kd_tree', 'kd_tree', 'kd_tree', 'brute',
                   'brute', 'brute', 'brute', 'brute', 'brute'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_knn__n_jobs': masked_array(data=[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_knn__n_neighbors': masked_array(data=[5, 5, 10, 10, 15, 15, 5, 5, 10, 10, 15, 15, 5, 5, 10,
                   10, 15, 15, 5, 5, 10, 10, 15, 15],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_knn__weights': masked_array(data=['uniform', 'distance', 'uniform', 'distance',
                   'uniform', 'distance', 'uniform', 'distance',
                   'uniform', 'distance', 'uniform', 'distance',
                   'uniform', 'distance', 'uniform', 'distance',
                   'uniform', 'distance', 'uniform', 'distance',
                   'uniform', 'distance', 'uniform', 'distance'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'knn__algorithm': 'auto', 'knn__n_jobs': -1, 'knn__n_neighbors': 5, 'knn__weights': 'uniform'}, {'knn__algorithm': 'auto', 'knn__n_jobs': -1, 'knn__n_neighbors': 5, 'knn__weights': 'distance'}, {'knn__algorithm': 'auto', 'knn__n_jobs': -1, 'knn__n_neighbors': 10, 'knn__weights': 'uniform'}, {'knn__algorithm': 'auto', 'knn__n_jobs': -1, 'knn__n_neighbors': 10, 'knn__weights': 'distance'}, {'knn__algorithm': 'auto', 'knn__n_jobs': -1, 'knn__n_neighbors': 15, 'knn__weights': 'uniform'}, {'knn__algorithm': 'auto', 'knn__n_jobs': -1, 'knn__n_neighbors': 15, 'knn__weights': 'distance'}, {'knn__algorithm': 'ball_tree', 'knn__n_jobs': -1, 'knn__n_neighbors': 5, 'knn__weights': 'uniform'}, {'knn__algorithm': 'ball_tree', 'knn__n_jobs': -1, 'knn__n_neighbors': 5, 'knn__weights': 'distance'}, {'knn__algorithm': 'ball_tree', 'knn__n_jobs': -1, 'knn__n_neighbors': 10, 'knn__weights': 'uniform'}, {'knn__algorithm': 'ball_tree', 'knn__n_jobs': -1, 'knn__n_neighbors': 10, 'knn__weights': 'distance'}, {'knn__algorithm': 'ball_tree', 'knn__n_jobs': -1, 'knn__n_neighbors': 15, 'knn__weights': 'uniform'}, {'knn__algorithm': 'ball_tree', 'knn__n_jobs': -1, 'knn__n_neighbors': 15, 'knn__weights': 'distance'}, {'knn__algorithm': 'kd_tree', 'knn__n_jobs': -1, 'knn__n_neighbors': 5, 'knn__weights': 'uniform'}, {'knn__algorithm': 'kd_tree', 'knn__n_jobs': -1, 'knn__n_neighbors': 5, 'knn__weights': 'distance'}, {'knn__algorithm': 'kd_tree', 'knn__n_jobs': -1, 'knn__n_neighbors': 10, 'knn__weights': 'uniform'}, {'knn__algorithm': 'kd_tree', 'knn__n_jobs': -1, 'knn__n_neighbors': 10, 'knn__weights': 'distance'}, {'knn__algorithm': 'kd_tree', 'knn__n_jobs': -1, 'knn__n_neighbors': 15, 'knn__weights': 'uniform'}, {'knn__algorithm': 'kd_tree', 'knn__n_jobs': -1, 'knn__n_neighbors': 15, 'knn__weights': 'distance'}, {'knn__algorithm': 'brute', 'knn__n_jobs': -1, 'knn__n_neighbors': 5, 'knn__weights': 'uniform'}, {'knn__algorithm': 'brute', 'knn__n_jobs': -1, 'knn__n_neighbors': 5, 'knn__weights': 'distance'}, {'knn__algorithm': 'brute', 'knn__n_jobs': -1, 'knn__n_neighbors': 10, 'knn__weights': 'uniform'}, {'knn__algorithm': 'brute', 'knn__n_jobs': -1, 'knn__n_neighbors': 10, 'knn__weights': 'distance'}, {'knn__algorithm': 'brute', 'knn__n_jobs': -1, 'knn__n_neighbors': 15, 'knn__weights': 'uniform'}, {'knn__algorithm': 'brute', 'knn__n_jobs': -1, 'knn__n_neighbors': 15, 'knn__weights': 'distance'}], 'split0_test_score': array([0.5952, 0.5966, 0.5988, 0.634 , 0.6542, 0.6564, 0.5952, 0.5966,
       0.5988, 0.634 , 0.6542, 0.6564, 0.5952, 0.5966, 0.5988, 0.634 ,
       0.6542, 0.6564, 0.5952, 0.5966, 0.5988, 0.634 , 0.6542, 0.6564]), 'split1_test_score': array([0.569 , 0.5724, 0.569 , 0.5656, 0.549 , 0.5528, 0.569 , 0.5724,
       0.569 , 0.5656, 0.549 , 0.5528, 0.569 , 0.5724, 0.569 , 0.5656,
       0.549 , 0.5528, 0.569 , 0.5724, 0.569 , 0.5656, 0.549 , 0.5528]), 'split2_test_score': array([0.6196, 0.621 , 0.6406, 0.6454, 0.6454, 0.6476, 0.6196, 0.621 ,
       0.6406, 0.6454, 0.6454, 0.6476, 0.6196, 0.621 , 0.6406, 0.6454,
       0.6454, 0.6476, 0.6196, 0.621 , 0.6406, 0.6454, 0.6454, 0.6476]), 'split3_test_score': array([0.5946, 0.5968, 0.6102, 0.643 , 0.6112, 0.6132, 0.5946, 0.5968,
       0.6102, 0.643 , 0.6112, 0.6132, 0.5946, 0.5968, 0.6102, 0.643 ,
       0.6112, 0.6132, 0.5946, 0.5968, 0.6102, 0.643 , 0.6112, 0.6132]), 'split4_test_score': array([0.622 , 0.6234, 0.635 , 0.6408, 0.6196, 0.621 , 0.622 , 0.6234,
       0.635 , 0.6408, 0.6196, 0.621 , 0.622 , 0.6234, 0.635 , 0.6408,
       0.6196, 0.621 , 0.622 , 0.6234, 0.635 , 0.6408, 0.6196, 0.621 ]), 'mean_test_score': array([0.60008, 0.60204, 0.61072, 0.62576, 0.61588, 0.6182 , 0.60008,
       0.60204, 0.61072, 0.62576, 0.61588, 0.6182 , 0.60008, 0.60204,
       0.61072, 0.62576, 0.61588, 0.6182 , 0.60008, 0.60204, 0.61072,
       0.62576, 0.61588, 0.6182 ]), 'std_test_score': array([0.01939757, 0.0187153 , 0.0259432 , 0.03031921, 0.03700953,
       0.03642417, 0.01939757, 0.0187153 , 0.0259432 , 0.03031921,
       0.03700953, 0.03642417, 0.01939757, 0.0187153 , 0.0259432 ,
       0.03031921, 0.03700953, 0.03642417, 0.01939757, 0.0187153 ,
       0.0259432 , 0.03031921, 0.03700953, 0.03642417]), 'rank_test_score': array([21, 17, 13,  1,  9,  5, 21, 17, 13,  1,  9,  5, 21, 17, 13,  1,  9,
        5, 21, 17, 13,  1,  9,  5])}
Test accuracy: 0.63256
Classification report:               precision    recall  f1-score   support

           0       0.65      0.56      0.60     12500
           1       0.62      0.70      0.66     12500

    accuracy                           0.63     25000
   macro avg       0.64      0.63      0.63     25000
weighted avg       0.64      0.63      0.63     25000

Running time: 251.25489234924316
ada starts
Best params: {'ada__base_estimator': DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_impurity_split=None,
                       min_samples_leaf=1, min_samples_split=2,
                       min_weight_fraction_leaf=0.0, presort='deprecated',
                       random_state=None, splitter='best'), 'ada__learning_rate': 0.1, 'ada__n_estimators': 100}
Validation results: {'mean_fit_time': array([33.87062726, 34.68536544, 34.76531992, 34.26780481, 31.75304246,
       28.1627017 ]), 'std_fit_time': array([0.44504547, 0.67653629, 0.7798857 , 1.26822235, 2.7443992 ,
       1.03010772]), 'mean_score_time': array([0.85750957, 0.89248958, 0.88589344, 0.8908905 , 0.66322136,
       0.55808067]), 'std_score_time': array([0.06061854, 0.02564461, 0.02730197, 0.06044578, 0.14704622,
       0.14186657]), 'param_ada__base_estimator': masked_array(data=[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_impurity_split=None,
                       min_samples_leaf=1, min_samples_split=2,
                       min_weight_fraction_leaf=0.0, presort='deprecated',
                       random_state=None, splitter='best'),
                   DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_impurity_split=None,
                       min_samples_leaf=1, min_samples_split=2,
                       min_weight_fraction_leaf=0.0, presort='deprecated',
                       random_state=None, splitter='best'),
                   DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_impurity_split=None,
                       min_samples_leaf=1, min_samples_split=2,
                       min_weight_fraction_leaf=0.0, presort='deprecated',
                       random_state=None, splitter='best'),
                   DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_impurity_split=None,
                       min_samples_leaf=1, min_samples_split=2,
                       min_weight_fraction_leaf=0.0, presort='deprecated',
                       random_state=None, splitter='best'),
                   DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_impurity_split=None,
                       min_samples_leaf=1, min_samples_split=2,
                       min_weight_fraction_leaf=0.0, presort='deprecated',
                       random_state=None, splitter='best'),
                   DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_impurity_split=None,
                       min_samples_leaf=1, min_samples_split=2,
                       min_weight_fraction_leaf=0.0, presort='deprecated',
                       random_state=None, splitter='best')],
             mask=[False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_ada__learning_rate': masked_array(data=[1.0, 1.0, 1.0, 0.1, 0.1, 0.1],
             mask=[False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_ada__n_estimators': masked_array(data=[100, 500, 1000, 100, 500, 1000],
             mask=[False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'ada__base_estimator': DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_impurity_split=None,
                       min_samples_leaf=1, min_samples_split=2,
                       min_weight_fraction_leaf=0.0, presort='deprecated',
                       random_state=None, splitter='best'), 'ada__learning_rate': 1.0, 'ada__n_estimators': 100}, {'ada__base_estimator': DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_impurity_split=None,
                       min_samples_leaf=1, min_samples_split=2,
                       min_weight_fraction_leaf=0.0, presort='deprecated',
                       random_state=None, splitter='best'), 'ada__learning_rate': 1.0, 'ada__n_estimators': 500}, {'ada__base_estimator': DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_impurity_split=None,
                       min_samples_leaf=1, min_samples_split=2,
                       min_weight_fraction_leaf=0.0, presort='deprecated',
                       random_state=None, splitter='best'), 'ada__learning_rate': 1.0, 'ada__n_estimators': 1000}, {'ada__base_estimator': DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_impurity_split=None,
                       min_samples_leaf=1, min_samples_split=2,
                       min_weight_fraction_leaf=0.0, presort='deprecated',
                       random_state=None, splitter='best'), 'ada__learning_rate': 0.1, 'ada__n_estimators': 100}, {'ada__base_estimator': DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_impurity_split=None,
                       min_samples_leaf=1, min_samples_split=2,
                       min_weight_fraction_leaf=0.0, presort='deprecated',
                       random_state=None, splitter='best'), 'ada__learning_rate': 0.1, 'ada__n_estimators': 500}, {'ada__base_estimator': DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_impurity_split=None,
                       min_samples_leaf=1, min_samples_split=2,
                       min_weight_fraction_leaf=0.0, presort='deprecated',
                       random_state=None, splitter='best'), 'ada__learning_rate': 0.1, 'ada__n_estimators': 1000}], 'split0_test_score': array([0.714 , 0.715 , 0.7104, 0.718 , 0.7102, 0.7136]), 'split1_test_score': array([0.7188, 0.7156, 0.7186, 0.721 , 0.7108, 0.7126]), 'split2_test_score': array([0.723 , 0.7224, 0.7174, 0.723 , 0.7152, 0.7144]), 'split3_test_score': array([0.7132, 0.7128, 0.7114, 0.7104, 0.7112, 0.7114]), 'split4_test_score': array([0.71  , 0.7184, 0.7072, 0.7156, 0.7182, 0.709 ]), 'mean_test_score': array([0.7158 , 0.71684, 0.713  , 0.7176 , 0.71312, 0.7122 ]), 'std_test_score': array([0.00457121, 0.0033043 , 0.00432851, 0.00439818, 0.0030896 ,
       0.00188892]), 'rank_test_score': array([3, 2, 5, 1, 4, 6])}
Test accuracy: 0.71548
Classification report:               precision    recall  f1-score   support

           0       0.71      0.72      0.72     12500
           1       0.72      0.71      0.71     12500

    accuracy                           0.72     25000
   macro avg       0.72      0.72      0.72     25000
weighted avg       0.72      0.72      0.72     25000

Running time: 132.3902940750122
nb starts
Best params: {'nb__alpha': 1.0, 'nb__fit_prior': True}
Validation results: {'mean_fit_time': array([3.45142083, 3.95473795, 3.88084698, 3.34941359]), 'std_fit_time': array([0.28851856, 0.07806575, 0.11759782, 0.12799774]), 'mean_score_time': array([0.89109073, 0.90479145, 0.73429694, 0.50392137]), 'std_score_time': array([0.04689702, 0.00990733, 0.11498846, 0.04213926]), 'param_nb__alpha': masked_array(data=[1.0, 1.0, 0.0, 0.0],
             mask=[False, False, False, False],
       fill_value='?',
            dtype=object), 'param_nb__fit_prior': masked_array(data=[True, False, True, False],
             mask=[False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'nb__alpha': 1.0, 'nb__fit_prior': True}, {'nb__alpha': 1.0, 'nb__fit_prior': False}, {'nb__alpha': 0.0, 'nb__fit_prior': True}, {'nb__alpha': 0.0, 'nb__fit_prior': False}], 'split0_test_score': array([0.8544, 0.8544, 0.7714, 0.7714]), 'split1_test_score': array([0.842 , 0.842 , 0.7712, 0.7712]), 'split2_test_score': array([0.8496, 0.8496, 0.773 , 0.773 ]), 'split3_test_score': array([0.8588, 0.8588, 0.7734, 0.7734]), 'split4_test_score': array([0.8522, 0.8522, 0.765 , 0.765 ]), 'mean_test_score': array([0.8514, 0.8514, 0.7708, 0.7708]), 'std_test_score': array([0.0055857 , 0.0055857 , 0.00302523, 0.00302523]), 'rank_test_score': array([1, 1, 3, 3])}
Test accuracy: 0.79944
Classification report:               precision    recall  f1-score   support

           0       0.77      0.86      0.81     12500
           1       0.84      0.74      0.79     12500

    accuracy                           0.80     25000
   macro avg       0.80      0.80      0.80     25000
weighted avg       0.80      0.80      0.80     25000

Running time: 17.769224882125854
